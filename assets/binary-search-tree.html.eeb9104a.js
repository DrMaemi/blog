import{D as o}from"./DetailsOpen.d5ab58f9.js";import{U as u}from"./UmlScript.44c1627f.js";import{f as e,o as c,c as l,a as n,b as s,d as a,u as p,e as r,r as i}from"./app.3d770d81.js";import{_ as k}from"./_plugin-vue_export-helper.cdc0426e.js";const C=n("h2",{id:"_1-\u110B\u1175\u110C\u1175\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-\u1110\u1173\u1105\u1175-binary-search-tree-\u1105\u1161\u11AB",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-\u110B\u1175\u110C\u1175\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-\u1110\u1173\u1105\u1175-binary-search-tree-\u1105\u1161\u11AB","aria-hidden":"true"},"#"),s(" 1. \uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC(Binary Search Tree)\uB780?")],-1),B=n("p",null,[s("\uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC(Binary Search Tree)\uB780 \uC774\uC9C4 \uD0D0\uC0C9(Binary Search)\uACFC \uC5F0\uACB0 \uB9AC\uC2A4\uD2B8(Linked List)\uB97C \uACB0\uD569\uD55C \uC790\uB8CC\uAD6C\uC870\uC785\uB2C8\uB2E4. \uC774\uC9C4 \uD0D0\uC0C9\uC758 "),n("strong",null,"\uD6A8\uC728\uC801 \uD0D0\uC0C9 \uB2A5\uB825\uC744 \uC720\uC9C0"),s("\uD558\uBA74\uC11C "),n("strong",null,"\uBE48\uBC88\uD55C \uC790\uB8CC \uC785\uB825-\uC0AD\uC81C\uAC00 \uAC00\uB2A5"),s("\uD558\uAC8C\uB054 \uACE0\uC548\uB410\uC2B5\uB2C8\uB2E4.")],-1),d=n("p",null,[s("\uAE30\uC874\uC5D0 \uC815\uB82C\uB41C \uBC30\uC5F4\uC5D0\uC11C \uC774\uC9C4 \uD0D0\uC0C9\uC5D0 \uC18C\uC694\uB418\uB294 \uC2DC\uAC04 \uBCF5\uC7A1\uB3C4\uB294 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"log"),n("mo",null,"\u2061"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(\\log n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mop"},[s("lo"),n("span",{style:{"margin-right":"0.01389em"}},"g")]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("\uC73C\uB85C \uBE60\uB974\uC9C0\uB9CC \uC790\uB8CC \uC785\uB825, \uC0AD\uC81C \uC2DC \uBC30\uC5F4\uC744 \uC774\uB3D9\uC2DC\uCF1C\uC57C \uD558\uAE30 \uB54C\uBB38\uC5D0 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("\uC774 \uC18C\uC694\uB429\uB2C8\uB2E4. \uC5F0\uACB0 \uB9AC\uC2A4\uD2B8\uC758 \uACBD\uC6B0 \uC790\uB8CC \uC785\uB825, \uC0AD\uC81C\uC5D0 \uC18C\uC694\uB418\uB294 \uC2DC\uAC04 \uBCF5\uC7A1\uB3C4\uB294 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])]),s("\uB85C \uD6A8\uC728\uC801\uC774\uC9C0\uB9CC \uD0D0\uC0C9\uC5D0\uB294 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("\uC774 \uC18C\uC694\uB429\uB2C8\uB2E4.")],-1),m=r(`<h2 id="_2-\u110B\u1175\u110C\u1175\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-\u1110\u1173\u1105\u1175-\u1109\u1169\u11A8\u1109\u1165\u11BC" tabindex="-1"><a class="header-anchor" href="#_2-\u110B\u1175\u110C\u1175\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-\u1110\u1173\u1105\u1175-\u1109\u1169\u11A8\u1109\u1165\u11BC" aria-hidden="true">#</a> 2. \uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC \uC18D\uC131</h2><p>\uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC\uB294 \uB2E4\uC74C\uACFC \uAC19\uC740 \uC18D\uC131\uC744 \uC9C0\uB2D9\uB2C8\uB2E4.</p><ul><li>\uAC01 \uB178\uB4DC\uB294 \uAC12\uC744 \uC9C0\uB2D8</li><li>\uAC12\uC740 \uC804\uC21C\uC11C(Totally Ordered Set)\uB97C \uC9C0\uB2D8</li><li>\uAC01 \uB178\uB4DC\uC758 \uC67C\uCABD \uC11C\uBE0C \uD2B8\uB9AC\uC5D0\uB294 \uD574\uB2F9 \uB178\uB4DC\uC758 \uAC12\uBCF4\uB2E4 \uC791\uC740 \uAC12\uC744 \uC9C0\uB2CC \uB178\uB4DC\uB4E4\uB85C \uAD6C\uC131\uB428</li><li>\uAC01 \uB178\uB4DC\uC758 \uC624\uB978\uCABD \uC11C\uBE0C \uD2B8\uB9AC\uC5D0\uB294 \uD574\uB2F9 \uB178\uB4DC\uC758 \uAC12\uBCF4\uB2E4 \uD070 \uAC12\uC744 \uC9C0\uB2CC \uB178\uB4DC\uB4E4\uB85C \uAD6C\uC131\uB428</li><li>\uC88C\uC6B0 \uC11C\uBE0C \uD2B8\uB9AC\uB294 \uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC\uC784</li></ul><div class="custom-container info"><p class="custom-container-title">Info</p><p>\uC804\uC21C\uC11C(Totally Ordered Set)\uB780 \uC5B4\uB5A4 \uAC12\uB4E4\uB85C \uC774\uB8E8\uC5B4\uC9C4 \uC9D1\uD569\uC5D0\uC11C \uC784\uC758\uC758 \uB450 \uAC12\uC744 \uC120\uD0DD\uD588\uC744 \uB54C \uADF8 \uAC12\uB4E4\uC744 \uBE44\uAD50\uD560 \uC218 \uC788\uB294 \uC9D1\uD569\uC744 \uC758\uBBF8\uD569\uB2C8\uB2E4.</p></div><div class="mxgraph" style="max-width:100%;margin:auto;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;lightbox&quot;:false,&quot;nav&quot;:true,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-08-03T14:52:55.445Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\\&quot; etag=\\&quot;XB5Hk7NDXyR6F6lVfUbY\\&quot; version=\\&quot;20.2.2\\&quot; type=\\&quot;google\\&quot;&gt;&lt;diagram id=\\&quot;wZXT4xgjHuS1a3lyYguk\\&quot; name=\\&quot;\uADF8\uB9BC 1. \uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC \uAC1C\uC694\\&quot;&gt;7Vxtk6I4EP41flwLkvD2cZxZb+qqtmqr5l7mPm1lJQp1CB7E1dlff4kENAmjyArRXfkwJQ000P30k+5OmBF8XG5/y/Eq+pSFJBkBK9yO4NMIAOQg9pcL3kqBE9ilYJHHYSk6ELzE34kQWkK6jkNSSCfSLEtovJKFsyxNyYxKMpzn2UY+bZ4l8l1XeEE0wcsMJ7r07zikUSn1gbeXP5N4EVV3tt2gPLLE1cniTYoIh9nmQAQ/juBjnmW0/LXcPpKE266yS3nd9J2j9YPlJKVtLvgEvqI8e5650Rcw//P3D/9Ziz8+CC3fcLIWL/wgnpa+VSZgapi12c5kE8WUvKzwjB/ZMH8zWUSXCduz2U9crEoXzOMtYXedzOMkecySLGeyNEu5ioLm2b+kEo4AtHYbPzlL6YG83IRc4ML22b54YpJTsn3XFHZtYAZMki0Jzd/YKeKCGl0ClLYv9jd7FztCFB14t5JhAapFrXlvd/ZDmP4MNwDNDZNfwA22K7uBPYVZN0DNDa+/gBvUaACmo8HR3KB7IQ0fOLuzvVmCiyKeycbPs3Uacqs/cWOys4XNYJPRp1Nh3PI2JNSGBMWU7FGydT4jp4mV4nxB6KnI113T0vQ5STCNv8mP2+QPcYfPWcxeZO95JHseBopLy9cUVx2OLYoiW1GEkKKotIOmaAeP+rW7I8a9dsSY8jB01JHO6eZhCE8o6tnDnubhWRSzXA5YCSkKHmkRTveWV73P2JEq9JzEi5T9TsicH+EMGrO070GIl3EY8osnOSni7/jrThFHxoq/4e6dncnIeeKa1jQrBCVrYBFE38D9czaOPAulF2BxzdOezuJ1mB4iDfZF48HAQcm36fQGgxLYFwpKTVHPQVklDg1RucgJpiS/B6bubashMJvQ1ltg2nq5cWWR2TbBMpY4BYpPVV+1jWDgKYoGTpxsveQ5BgURISEuop3vbRkUXP4ZUxb36U4CrD0cqu4JOAGeaydvzWNuR9dDtexSFfXtejQwC9RJM3Nk/vbKLxo71e4/tQ6287SV9t4kMm7DHifLLrMQUvoedlcIAccZQ8eBrG5zAghcz5H1OmjsIuS6VoAs14Ng4OzgvDr+zi0at9hqi6Urt2iK+nb90AV5HxkGaMkl0CRk1B4qBB0hY3veGO5KCuRZELrAl/VC+TAcFk96+T/QWHVpPBnDidKhA51bfWo5oyrqGwr+fVQ50/VAoQi7q+tVrlEV9e36oTtKfbAAbDmqHMwRm8CMUuBCv2uKaimKBi5wK+wfxYzZKT3xgD80k6o0Auue0wFaYANaemsxgTZ9hds3uwruwLTZ29T0t292dRwybvY2le7Nm10pTus5XmNWb1Nk3rzV67VJV2P2NrXY7ZsdXJvZz6t7rjP5rYx6Ovs12lQBasXUPftFY9+1HQgC4HmBizxl4PLHrov8wPdYnsySOE++Td+58c9QT4HWBZVjElJKyoK6tumQCii55Y+gUURBfT1xv4jqpe/bmqSQUZJSIWV1JSmvsbVbqbVNNn4h+BkA1ZqivGsa9VDXPiGAR6cSEDCKqPNWPFwpolBbRLlGEaUuC+6MKOcoRRmdm4Itei4yYE7UREfqHb04kiY2Rj9e9yizO7Ch7Kkr0kPE1MtNL/9Rhl7mM/Mt+ZrfEXDxklsvobu3t/TPNd5fXzhjFiHMkiZWGLK6dYqXccKt/BfJQ5zikfxtB+qnQ4kavu0Ihixj4dAzuX3Qr9HiVF30Cy+1SAQOvAANtuho3A5xqun4NTCnXt+/NrGmoNM7c0rLti2lsjbNnBWe7gsfujIlAmjs+NZ+Qx2JU50JOaG3Zx5FetNlcvXJUUjmeL17su5RfmkKVxf1NzC4O2jE682PRv7WP9m/O1bOgpGyMLqByy/kWba7/5cOZYTv/y8G/Pg/&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}"></div><div class="caption">&lt;\uADF8\uB9BC 1. \uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC \uAC1C\uC694&gt;</div><h2 id="_3-\u110B\u1175\u110C\u1175\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-\u1110\u1173\u1105\u1175\u110B\u1174-\u1109\u116E\u11AB\u1112\u116C-traversal" tabindex="-1"><a class="header-anchor" href="#_3-\u110B\u1175\u110C\u1175\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-\u1110\u1173\u1105\u1175\u110B\u1174-\u1109\u116E\u11AB\u1112\u116C-traversal" aria-hidden="true">#</a> 3. \uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC\uC758 \uC21C\uD68C(Traversal)</h2><p>\uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC\uB97C \uC21C\uD68C\uD560 \uB54C\uB294 \uC911\uC704 \uC21C\uD68C(In-order traversal) \uBC29\uC2DD\uC744 \uC0AC\uC6A9\uD569\uB2C8\uB2E4. \uC911\uC704 \uC21C\uD68C\uB97C \uD1B5\uD574 \uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC \uB0B4 \uBAA8\uB4E0 \uAC12\uB4E4\uC744 <strong>\uC815\uB82C\uB41C \uC21C\uC11C\uB300\uB85C \uC77D\uC744 \uC218 \uC788\uC2B5\uB2C8\uB2E4</strong>.</p><div class="mxgraph" style="max-width:100%;margin:auto;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;lightbox&quot;:false,&quot;nav&quot;:true,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-08-03T14:56:25.798Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\\&quot; etag=\\&quot;n5n8mBnTpwMJppob6K4Z\\&quot; version=\\&quot;20.2.2\\&quot; type=\\&quot;google\\&quot;&gt;&lt;diagram id=\\&quot;1XHMf9NUw31pxRIcKKfj\\&quot; name=\\&quot;\uADF8\uB9BC 2. \uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC\uB97C \uC911\uC704 \uC21C\uD68C \uC2DC 1, 3, 5, 7, 8, 10\\&quot;&gt;5Vhbb9s2GP01BraHGLyIFPWYOHWMbt26ZVmLvBSqRcvCZNGV6Njerx9vom7u4gYO3CZ+sMXzUaR0LpToEZ6sdjdlvF6+EwnPRwgkuxG+HiEUkEB9a2BvARJBC6RlllioBdxm/3IHAodusoRXnY5SiFxm6y44F0XB57KDxWUptt1uC5F3Z13HKR8At/M4H6IfskQuLcpQ2OAznqXLemZII1tZxXVndyfVMk7EtgXhNyM8KYWQ9mi1m/Bcc1fzYs+bfqXqL6zkhTzmhPz+E5ttHt6u7z5c//XHzdtf93fZhRvlIc437obdjVVyX1OghlFsq8bVdplJfruO57qyVXorbClXuWpBdRhXayvBIttxNevVIsvzichFqbBCFHqISpbiH16DI4SB+ejOopAt3H4c7nwBmWq7K+al5LuvUgE9wcqYXKy4LPeqizvBa+JMGbnmtlGYOGjZErfGYuep1A/c0K4OHPPfoAIaqIBHiOZS87WOi44c9MtGO+Zqbqm6VMUy/Rz/pK5NTQ56Pz8bwoDm8GIRr7J8b09ZiUJUVkhfrwzJugrWO4sriuVFnGdpYQuVjEtpSvVlqKPU/pL+IkAUAxo1FvetmhFiOFHItT7WghBNAlFEPtYX+r615k8aBjXDWOZ9JWwqlnhfqbOggHYadN3kQeMmERqBpulSoQGbCw02ydC4yYaG2+mo56wTYk7zGfFVl5O6apJiJmcGa92jTcwxLPqSJ7DJENEpajiEDeNg38JZC7ex8jXSKrl4HaypmHk8bc3fl9c0vcZtsOs8129gURs0FVybtdrPL34VhGF3FYTkzMsgHiyD8DXIALsy+IfTuWQIBjKQ1yBD9J3JQAYysFcgA6Lf2aJEh4sSeAU6YHC+OMDP9+QG3F7+NsFX93/O/t4WaHZgpzJUoUgu9ZZPteZ5XFXZvEt+KTZFolm/1mSq3o4zfIh0/ZlOPZk8GewTe1SqSxGbcs4f322pl+iUy8eiP5TmSOpLnscye+he7iE93AzvRaZf/rzyDI1pGFIaERRRisOODzDuCWxv2o3R3n72hjVvhO1gh72BLCuDgYxZPAlP989wj/W8/plOXTjP4B90Tv+gKBxjY5QgBBhT3PUPO5F/8OFpTu+mj7/MwBf48fdLAj69W93dLN6j/YtYjdCRbgrO6qYgHDOKWBREMACQhUFvOYJjAmmkdnKqR0Ce6C3ce9j1n2LP7KaXsDYd6yZ8VjdBNgaMMEghZkEUEXaih1vvbQkTbUsAMQUBJbTvy2e203Af/eMtTuRIO9Fz2gmD/12cED3F4oQRGEMUMqYMhUISou4cYTRWkwcQ0JAB9cZ2KquN3N9nre7NH2f4zX8=&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}"></div><div class="caption">&lt;\uADF8\uB9BC 2. \uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC\uB97C \uC911\uC704 \uC21C\uD68C \uC2DC 1, 3, 5, 7, 8, 10&gt;</div><h2 id="_4-\u110B\u1175\u110C\u1175\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-\u1110\u1173\u1105\u1175\u110B\u1174-\u1100\u1175\u1102\u1173\u11BC-operations" tabindex="-1"><a class="header-anchor" href="#_4-\u110B\u1175\u110C\u1175\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-\u1110\u1173\u1105\u1175\u110B\u1174-\u1100\u1175\u1102\u1173\u11BC-operations" aria-hidden="true">#</a> 4. \uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC\uC758 \uAE30\uB2A5(Operations)</h2><p>\uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC\uC758 \uD575\uC2EC \uC5F0\uC0B0\uC740 \uAC80\uC0C9(find), \uC0BD\uC785(insert), \uC0AD\uC81C(erase) \uC138 \uAC00\uC9C0\uAC00 \uC788\uC2B5\uB2C8\uB2E4.</p><details class="custom-container details"><summary>Node</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    T val<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    Node<span class="token operator">*</span> right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> val <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">Node</span><span class="token punctuation">(</span>T val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div></details><details class="custom-container details"><summary>BinarySearchTree</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">getPredecessor</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> node <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">eraseRecursive</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> cur<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> cur<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cur<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">eraseRecursive</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span>
            cur<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">eraseRecursive</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> right <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
                <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> left <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
                <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> predecessor <span class="token operator">=</span> <span class="token function">getPredecessor</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cur<span class="token operator">-&gt;</span>val <span class="token operator">=</span> predecessor<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            cur<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">eraseRecursive</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> predecessor<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">inOrderTraversalRecursive</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token function">inOrderTraversalRecursive</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>

        cout <span class="token operator">&lt;&lt;</span> cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token function">inOrderTraversalRecursive</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token function">BinarySearchTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>T val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; inserted\\n&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> isInserted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isInserted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> cur<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cur<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    isInserted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cur<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    isInserted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; inserted\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span>T val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">eraseRecursive</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; erased\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">find</span><span class="token punctuation">(</span>T val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Node<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>
        
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> cur<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> cur<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">inOrderTraversalRecursive</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div></details><details class="custom-container details"><summary>main</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    BinarySearchTree<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> bst<span class="token punctuation">;</span>

    bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    bst<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bst<span class="token punctuation">.</span><span class="token function">inOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\uC2E4\uD589 \uACB0\uACFC</p><div class="language-text ext-text"><pre class="language-text"><code>1 inserted
1
3 inserted
1 3
5 inserted
1 3 5
7 inserted
1 3 5 7
2 inserted
1 2 3 5 7
6 inserted
1 2 3 5 6 7
4 inserted
1 2 3 4 5 6 7
3 erased
1 2 4 5 6 7
8 erased
1 2 4 5 6 7
</code></pre></div></details><h2 id="a-\u110E\u1161\u11B7\u110C\u1169" tabindex="-1"><a class="header-anchor" href="#a-\u110E\u1161\u11B7\u110C\u1169" aria-hidden="true">#</a> A. \uCC38\uC870</h2>`,16),g={style:{"text-align":"left"}},h={href:"http://Github.io",target:"_blank",rel:"noopener noreferrer"},D={href:"https://ratsgo.github.io/data%20structure&algorithm/2017/10/22/bst/",target:"_blank",rel:"noopener noreferrer"},A={href:"http://wikipedia.org",target:"_blank",rel:"noopener noreferrer"},f={href:"https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%A7%84_%ED%83%90%EC%83%89_%ED%8A%B8%EB%A6%AC",target:"_blank",rel:"noopener noreferrer"},v=e({__name:"binary-search-tree.html",setup(y){return(w,q)=>{const t=i("ExternalLinkIcon");return c(),l("div",null,[C,B,d,m,n("div",g,[n("p",null,[s('ratsgo, "\uC774\uC9C4\uD0D0\uC0C9\uD2B8\uB9AC(Binary Search Tree)," '),n("em",null,[n("a",h,[s("Github.io"),a(t)])]),s(", Oct. 22, 2017. [Online]. Available: "),n("a",D,[s("https://ratsgo.github.io/data%20structure&algorithm/2017/10/22/bst/"),a(t)]),s(" [Accessed Aug. 4, 2022].")]),n("p",null,[s('Wikipedia, "\uC774\uC9C4 \uD0D0\uC0C9 \uD2B8\uB9AC," '),n("em",null,[n("a",A,[s("wikipedia.org"),a(t)])]),s(", Feb. 26, 2022. [Online]. Available: "),n("a",f,[s("https://ko.wikipedia.org/wiki/\uC774\uC9C4_\uD0D0\uC0C9_\uD2B8\uB9AC"),a(t)]),s(" [Accessed Aug. 3, 2022].")])]),a(p(o)),a(p(u))])}}}),N=k(v,[["__file","binary-search-tree.html.vue"]]);export{N as default};
