import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as s,b as n,d as t,e as p,r as d}from"./app.1b54aa55.js";const l={},i=p(`<h2 id="basic-types" tabindex="-1"><a class="header-anchor" href="#basic-types" aria-hidden="true">#</a> Basic Types</h2><table><thead><tr><th>Type</th><th>Size(bytes)</th><th>Format Specifier</th></tr></thead><tbody><tr><td><code>int</code></td><td>2 ~ 4(usually 4)</td><td><code>%d</code>, <code>%i</code></td></tr><tr><td><code>char</code>, <code>signed char</code>, <code>unsigned char</code></td><td>1</td><td><code>%c</code></td></tr><tr><td><code>float</code></td><td>4</td><td><code>%f</code></td></tr><tr><td><code>double</code></td><td>8</td><td><code>%lf</code></td></tr><tr><td><code>short int</code></td><td>2</td><td><code>%hd</code></td></tr><tr><td><code>unsigned int</code></td><td>2 ~ 4(usually 4)</td><td><code>%u</code></td></tr><tr><td><code>long int</code></td><td>4 ~ 8(usually 8)</td><td><code>%ld</code>, <code>%li</code></td></tr><tr><td><code>long long int</code></td><td>8 ~</td><td><code>%lld</code>, <code>%lli</code></td></tr><tr><td><code>unsigned long int</code></td><td>4 ~</td><td><code>%lu</code></td></tr><tr><td><code>unsigned long long int</code></td><td>8 ~</td><td><code>%llu</code></td></tr><tr><td><code>long double</code></td><td>10 ~ 16(usaully 12, 16)</td><td><code>%Lf</code></td></tr></tbody></table><ul><li><code>signed</code> - \uC591\uC218(positive), \uC74C\uC218(nagative) \uAC12 \uC800\uC7A5 \uAC00\uB2A5</li><li><code>unsigned</code> - \uC591\uC218 \uAC12\uB9CC \uC800\uC7A5 \uAC00\uB2A5</li></ul><p>\uC608\uC2DC</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">int</span> id<span class="token punctuation">,</span> age<span class="token punctuation">;</span>
<span class="token keyword">float</span> salary<span class="token punctuation">;</span>
<span class="token keyword">double</span> price<span class="token punctuation">;</span>
<span class="token keyword">float</span> normalizationFactor <span class="token operator">=</span> <span class="token number">22.442e2</span>
<span class="token keyword">char</span> test <span class="token operator">=</span> <span class="token char">&#39;h&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">short</span> a<span class="token punctuation">;</span> <span class="token comment">// short int</span>
<span class="token keyword">long</span> b<span class="token punctuation">;</span> <span class="token comment">// long int</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span> <span class="token comment">// long long int</span>
<span class="token keyword">long</span> <span class="token keyword">double</span> d<span class="token punctuation">;</span>
</code></pre></div><h3 id="check-size-with-sizeof" tabindex="-1"><a class="header-anchor" href="#check-size-with-sizeof" aria-hidden="true">#</a> Check size with <code>sizeof()</code></h3><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">short</span> a<span class="token punctuation">;</span>
    <span class="token keyword">long</span> b<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">double</span> d<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size of short = %d bytes\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size of long = %d bytes\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size of long long = %d bytes\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size of long double= %d bytes\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-text ext-text"><pre class="language-text"><code>size of short = 2 bytes
size of long = 4 bytes
size of long long = 8 bytes
size of long double= 16 bytes
</code></pre></div><h2 id="derived-types" tabindex="-1"><a class="header-anchor" href="#derived-types" aria-hidden="true">#</a> Derived Types</h2><ul><li>Basic Type\uC73C\uB85C\uBD80\uD130 \uD30C\uC0DD\uB41C \uD0C0\uC785</li><li>ex. <code>bool</code>, <code>enum</code>, <code>complex</code>, <code>struct</code>, <code>union</code>, etc.</li><li>\uC774\uD6C4 \uD3EC\uC2A4\uD2B8\uC5D0\uC11C \uC790\uC138\uD788 \uB2E4\uB8F0 \uC608\uC815</li></ul><h2 id="a-\u110E\u1161\u11B7\u110C\u1169" tabindex="-1"><a class="header-anchor" href="#a-\u110E\u1161\u11B7\u110C\u1169" aria-hidden="true">#</a> A. \uCC38\uC870</h2>`,11),r={href:"http://programiz.com",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.programiz.com/c-programming/c-data-types",target:"_blank",rel:"noopener noreferrer"};function k(h,g){const a=d("ExternalLinkIcon");return o(),c("div",null,[i,s("p",null,[n('Parewa Labs Pvt. Ltd., "C Data Types," '),s("em",null,[s("a",r,[n("programiz.com"),t(a)])]),n(", [Online]. Available: "),s("a",u,[n("https://www.programiz.com/c-programming/c-data-types"),t(a)]),n(" [Accessed Jun. 5, 2023].")])])}const b=e(l,[["render",k],["__file","3-types.html.vue"]]);export{b as default};
