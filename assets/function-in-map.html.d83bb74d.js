import{D as p}from"./DetailsOpen.d5ab58f9.js";import{f as o,o as u,c as e,a as s,b as n,d as a,u as c,e as l,r as i}from"./app.3de1d838.js";import{_ as k}from"./_plugin-vue_export-helper.cdc0426e.js";const r=l(`<h2 id="functional-any-\u1112\u1166\u1103\u1165" tabindex="-1"><a class="header-anchor" href="#functional-any-\u1112\u1166\u1103\u1165" aria-hidden="true">#</a> <code>&lt;functional&gt;</code> &amp; <code>&lt;any&gt;</code> \uD5E4\uB354</h2><p>\uD568\uC218\uD615 \uD504\uB85C\uADF8\uB798\uBC0D \uAE30\uBC95\uC5D0\uB294 \uD568\uC218\uAC00 1\uAE09 \uAC1D\uCCB4(First-class object)\uAC00 \uB41C\uB2E4.</p><p>\uC774\uB294 \uBCC0\uC218\uB098 \uB370\uC774\uD130 \uAD6C\uC870 \uC548\uC5D0 \uD568\uC218\uB97C \uB2F4\uC744 \uC218 \uC788\uC73C\uBA70 \uC774\uC678\uC5D0\uB3C4 \uB2E4\uC591\uD55C \uCF54\uB529 \uC2A4\uD0C0\uC77C\uC744 \uAC00\uB2A5\uCF00\uD558\uB294\uB370, \uD30C\uC774\uC36C\uC758 \uB515\uC154\uB108\uB9AC\uC5D0 \uB78C\uB2E4 \uD568\uC218\uB97C \uBC14\uC778\uB529\uD558\uB294 \uAC83\uCC98\uB7FC C++\uC5D0\uC11C\uB294 \uC5B4\uB5BB\uAC8C \uC0AC\uC6A9\uD560 \uC218 \uC788\uC744\uC9C0 \uAD81\uAE08\uD588\uB2E4.</p><p>C++ \uACF5\uC2DD \uBB38\uC11C\uC640 \uC5EC\uB7EC \uD3EC\uC2A4\uD2B8\uC758 \uCF54\uB4DC\uB97C \uCC38\uC870\uD558\uACE0 \uBA87 \uAC00\uC9C0 \uC0BD\uC9C8\uC744 \uD55C \uACB0\uACFC <code>&lt;functional&gt;</code>, <code>&lt;any&gt;</code> \uD5E4\uB354\uB97C \uC774\uC6A9\uD574\uC11C \uAC00\uB2A5\uD55C \uBC29\uBC95\uC744 \uCC3E\uC558\uB2E4.</p><details class="custom-container details"><summary><code>&lt;functional&gt;</code> \uD5E4\uB354 - function wrapper \uD074\uB798\uC2A4</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Ret</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">function</span><span class="token operator">&lt;</span><span class="token function">Ret</span><span class="token punctuation">(</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre></div></details><details class="custom-container details"><summary><code>&lt;any&gt;</code> \uD5E4\uB354 - any \uD074\uB798\uC2A4</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">any</span><span class="token punctuation">;</span>
</code></pre></div></details><p>any \uD074\uB798\uC2A4\uB294 \uD30C\uC774\uC36C\uC758 \uBCC0\uC218\uCC98\uB7FC \uC5EC\uB7EC \uAC00\uC9C0 \uC790\uB8CC\uD615\uC758 \uB370\uC774\uD130\uB97C \uC800\uC7A5\uD560 \uC218 \uC788\uB294 \uD074\uB798\uC2A4\uC774\uB2E4.</p><p>\uC774\uB7F0 \uAE30\uB2A5\uC740 \uBAA8\uB358 C++\uC758 <code>auto</code> \uD0A4\uC6CC\uB4DC\uC640 \uBE44\uC2B7\uD55C \uAE30\uB2A5\uC73C\uB85C \uBCF4\uC774\uB294\uB370, <code>auto</code>\uB294 \uBC14\uC778\uB529\uD558\uB294 \uAC12\uC73C\uB85C\uBD80\uD130 \uCEF4\uD30C\uC77C\uB7EC\uAC00 \uC790\uB8CC\uD615\uC744 \uCD94\uB860\uD558\uACE0 \uC774\uC5D0 \uB530\uB77C \uBCC0\uC218\uC758 \uC790\uB8CC\uD615\uC774 \uC815\uC758\uB418\uB294 \uBC18\uBA74 any \uD074\uB798\uC2A4\uB294 \uCF54\uB354\uAC00 \uD574\uB2F9 \uBCC0\uC218\uC5D0 \uC811\uADFC\uD558\uAE30 \uC804\uAE4C\uC9C0 \uC790\uB8CC\uD615\uC744 \uC815\uC758\uD558\uC9C0 \uC54A\uB294, \uC989 \uC790\uB8CC\uD615\uC744 \uCD94\uC0C1\uD654\uD558\uB294 \uAE30\uB2A5\uC73C\uB85C \uBCF4\uC778\uB2E4.</p><p>\uCF54\uB354\uAC00 any \uD0C0\uC785 \uBCC0\uC218\uC5D0 \uC811\uADFC\uD560 \uB54C\uB294 <code>&lt;any&gt;</code>\uD5E4\uB354\uC5D0 \uC815\uC758\uB418\uC5B4 \uC788\uB294 <code>any_cast&lt;type&gt;</code> \uD568\uC218\uB97C \uC774\uC6A9\uD574 \uC811\uADFC\uD574\uC57C \uD558\uBA70, \uC0AC\uC6A9\uC790\uAC00 <code>type</code>\uC744 \uC9C1\uC811 \uC815\uD574\uC918\uC57C \uD55C\uB2E4(\uC774 <code>type</code>\uC5D0 any\uB97C \uC0AC\uC6A9\uD560 \uACBD\uC6B0 \uC624\uB958\uB97C \uBC1C\uC0DD\uC2DC\uD0A8\uB2E4). \uC774 \uB54C\uBB38\uC5D0 type-safe\uD55C \uC811\uADFC\uC774 \uAC00\uB2A5\uD574\uC9C4\uB2E4.</p><p>\uC544, \uADF8\uB9AC\uACE0 any \uD074\uB798\uC2A4\uB294 C++17\uBD80\uD130 \uC0AC\uC6A9 \uAC00\uB2A5\uD558\uB2E4.</p><h2 id="\u110B\u1168\u110C\u1166" tabindex="-1"><a class="header-anchor" href="#\u110B\u1168\u110C\u1166" aria-hidden="true">#</a> \uC608\uC81C</h2><details class="custom-container details"><summary>any</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;any&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha<span class="token punctuation">;</span>
 
    <span class="token comment">// any type</span>
    std<span class="token double-colon punctuation">::</span>any a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
 
    <span class="token comment">// bad cast</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>bad_any_cast<span class="token operator">&amp;</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">// has value</span>
    a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">has_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">// reset</span>
    a<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">.</span><span class="token function">has_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;no value\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">// pointer to contained data</span>
    a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> i <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>\uC2E4\uD589 \uACB0\uACFC</summary><div class="language-text ext-text"><pre class="language-text"><code>int: 1
double: 3.14
bool: true
bad any_cast
int: 2
no value
3
</code></pre></div></details><details class="custom-container details"><summary>any &amp; function</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;any&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">auto</span> func <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;In any&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> function<span class="token operator">&lt;</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span> my_map<span class="token punctuation">;</span>

    my_map<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span>
    my_map<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">&quot;second&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">auto</span> ret <span class="token operator">=</span> my_map<span class="token punctuation">[</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>\uC2E4\uD589 \uACB0\uACFC</summary><div class="language-text ext-text"><pre class="language-text"><code>In any
100
1000
</code></pre></div></details><p>\uC704 \uCF54\uB4DC\uB97C \uBCF4\uBA74 map \uC790\uB8CC\uAD6C\uC870\uC758 \uAC12\uC73C\uB85C <code>function&lt;any(int)&gt;</code> \uC790\uB8CC\uD615\uC744 \uC0AC\uC6A9\uD588\uB2E4. \uC774\uB294 <em>1\uAC1C\uC758 <code>int</code> \uD0C0\uC785 \uB9E4\uAC1C\uBCC0\uC218\uB97C \uBC1B\uC544 <code>any</code> \uD0C0\uC785\uC758 \uAC12\uC744 \uBC18\uD658\uD558\uB294 \uD568\uC218 \uAC1D\uCCB4</em>\uAC00 map\uC758 \uAC12\uC774 \uB41C\uB2E4\uB294 \uB73B\uC774\uB2E4.</p><p>\uADF8\uB7F0\uB370 map\uC758 \uD0A4(key)\uC5D0 \uB530\uB77C \uD638\uCD9C\uB418\uB294 \uD568\uC218 \uAC1D\uCCB4\uAC00 \uBC1B\uB294 \uB9E4\uAC1C \uBCC0\uC218\uC758 \uC885\uB958\uC640 \uAC1C\uC218\uB3C4 \uB2E4\uB978 \uACBD\uC6B0, map \uC790\uB8CC\uAD6C\uC870\uC758 \uAC12\uC73C\uB85C <code>any</code> \uC790\uB8CC\uD615\uC744 \uC0AC\uC6A9\uD558\uC5EC \uD55C \uBC88 \uB354 \uCD94\uC0C1\uD654\uD558\uB294 \uBC29\uC2DD\uC73C\uB85C \uCF54\uB529\uD574\uC57C \uD55C\uB2E4.</p><p>\uC774\uC640 \uAC19\uC740 \uCF54\uB529\uC744 \uC801\uC6A9\uD574\uBCFC \uC218 \uC788\uC5C8\uB358 \uC54C\uACE0\uB9AC\uC998 \uBB38\uC81C\uAC00 \uC544\uB798 \uC788\uB2E4.</p><figure class="opengraph"><a href="https://www.acmicpc.net/problem/18258" data-source-url="https://www.acmicpc.net/problem/18258"><div class="og-image" style="background-image:url(&#39;https://drive.google.com/uc?export=view&amp;id=1nCax5mgwtYA82T46I_ntU1afsBBNkrLr&#39;);"></div><div class="og-text"><p class="og-title">18258\uBC88: \uD050 2</p><p class="og-desc">\uC815\uC218\uB97C \uC800\uC7A5\uD558\uB294 \uD050\uB97C \uAD6C\uD604\uD55C \uB2E4\uC74C, \uC785\uB825\uC73C\uB85C \uC8FC\uC5B4\uC9C0\uB294 \uBA85\uB839\uC744 \uCC98\uB9AC\uD558\uB294 \uD504\uB85C\uADF8\uB7A8\uC744 \uC791\uC131\uD558\uC2DC\uC624..</p><p class="og-host">www.acmicpc.net</p></div></a></figure><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;any&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>

unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">&gt;</span> functionMap <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">function</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">function</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">int</span> x <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">function</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;empty&quot;</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">function</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;front&quot;</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">function</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;back&quot;</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">function</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> N<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> N<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        string command<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> command<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token string">&quot;push&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x<span class="token punctuation">;</span>
            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>
            <span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>functionMap<span class="token punctuation">[</span>command<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token generic-function"><span class="token function">any_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>functionMap<span class="token punctuation">[</span>command<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="a-\u110E\u1161\u11B7\u110C\u1169" tabindex="-1"><a class="header-anchor" href="#a-\u110E\u1161\u11B7\u110C\u1169" aria-hidden="true">#</a> A. \uCC38\uC870</h2>`,21),d={style:{"text-align":"left"}},C={href:"http://stackoverflow.com",target:"_blank",rel:"noopener noreferrer"},m={href:"https://stackoverflow.com/questions/61969316/is-it-possible-to-put-lambda-expressions-into-a-map-or-list-in-c",target:"_blank",rel:"noopener noreferrer"},v={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},B={href:"https://cplusplus.com/reference/functional/",target:"_blank",rel:"noopener noreferrer"},b={href:"http://cppreference.com",target:"_blank",rel:"noopener noreferrer"},g={href:"https://en.cppreference.com/w/cpp/utility/any",target:"_blank",rel:"noopener noreferrer"},y=o({__name:"function-in-map.html",setup(f){return(D,A)=>{const t=i("ExternalLinkIcon");return u(),e("div",null,[r,s("div",d,[s("p",null,[n('miniboxHaHa, "Is it possible to put lambda expressions into a map or list in C++?", '),s("em",null,[s("a",C,[n("stackoverflow.com"),a(t)])]),n(", May 23, 2020. [Online]. Available: "),s("a",m,[n("https://stackoverflow.com/questions/61969316/is-it-possible-to-put-lambda-expressions-into-a-map-or-list-in-c"),a(t)]),n(" [Accessed Jun. 18, 2022].")]),s("p",null,[n('cplusplus, "<functional>", '),s("em",null,[s("a",v,[n("cplusplus.com"),a(t)])]),n(", [Online]. Available: "),s("a",B,[n("https://cplusplus.com/reference/functional/"),a(t)]),n(" [Accessed Jun. 18, 2022].")]),s("p",null,[n('cppreference, "std::any", '),s("em",null,[s("a",b,[n("cppreference.com"),a(t)])]),n(", [Online]. Available: "),s("a",g,[n("https://en.cppreference.com/w/cpp/utility/any"),a(t)]),n(" [Accessed Jun.18, 2022].")])]),a(c(p))])}}}),E=k(y,[["__file","function-in-map.html.vue"]]);export{E as default};
