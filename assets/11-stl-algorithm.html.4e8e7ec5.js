import{D as u}from"./DetailsOpen.d5ab58f9.js";import{f as o,o as c,c as e,a as s,b as n,d as a,u as l,e as p,r as i}from"./app.59e5d57b.js";import{_ as k}from"./_plugin-vue_export-helper.cdc0426e.js";const r=p(`<h2 id="algorithm-\u1112\u1166\u1103\u1165" tabindex="-1"><a class="header-anchor" href="#algorithm-\u1112\u1166\u1103\u1165" aria-hidden="true">#</a> <code>&lt;algorithm&gt;</code> \uD5E4\uB354</h2><p><code>&lt;algorithm&gt;</code> \uD5E4\uB354\uB294 \uC694\uC18C\uB4E4(elements)\uC758 \uBC94\uC704(range)\uC5D0 \uB300\uD574 \uC0AC\uC6A9\uB418\uB294 \uD568\uC218\uB4E4\uC744 \uBAA8\uC544\uB193\uC740 \uB77C\uC774\uBE0C\uB7EC\uB9AC\uB2E4. \uC5EC\uAE30\uC11C \uBC94\uC704\uB780 \uBC18\uBCF5\uC790(iterator)\uC640 \uD3EC\uC778\uD130(pointer)\uB97C \uD1B5\uD574 \uBA85\uC2DC\uB420 \uC218 \uC788\uC73C\uBA70 \uC774\uB294 \uBC30\uC5F4\uC774\uB098 STL \uCEE8\uD14C\uC774\uB108\uC758 \uBC94\uC704\uAC00 \uB420 \uC218 \uC788\uB2E4\uB294 \uB73B\uC774\uB2E4. \uC720\uC758\uD560 \uC810\uC740 <code>&lt;algorithm&gt;</code> \uD5E4\uB354\uC5D0 \uC788\uB294 \uD568\uC218\uB4E4\uC740 \uC774\uB7EC\uD55C \uBC18\uBCF5\uC790\uC640 \uD3EC\uC778\uD130\uB97C \uD1B5\uD574 \uC790\uB8CC\uAD6C\uC870\uC5D0 \uC811\uADFC\uD558\uAE30 \uB54C\uBB38\uC5D0 \uC2E4\uC81C \uAC12\uC744 \uBCC0\uACBD\uD560 \uC218 \uC788\uB2E4\uB294 \uAC83\uACFC, \uC790\uB8CC\uAD6C\uC870\uC758 \uD06C\uAE30\uB098 \uC800\uC7A5 \uACF5\uAC04 \uD560\uB2F9 \uB4F1\uC758 \uC5F0\uC0B0\uC740 \uC218\uD589\uD558\uC9C0 \uBABB\uD55C\uB2E4\uB294 \uC810\uC774\uB2E4.</p><p>&lt;algorithm&gt; \uD5E4\uB354 \uD558\uC704\uC758 \uD568\uC218\uB4E4\uC744 \uC774\uC6A9\uD558\uB824\uBA74 \uB2E4\uC74C \uCF54\uB4DC\uB97C \uCD94\uAC00\uD574\uC57C \uD55C\uB2E4.</p><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
</code></pre></div><h2 id="algorihtm-\u110B\u1174-\u1112\u1161\u11B7\u1109\u116E\u1103\u1173\u11AF" tabindex="-1"><a class="header-anchor" href="#algorihtm-\u110B\u1174-\u1112\u1161\u11B7\u1109\u116E\u1103\u1173\u11AF" aria-hidden="true">#</a> <code>&lt;algorihtm&gt;</code>\uC758 \uD568\uC218\uB4E4</h2>`,5),C=s("code",null,"<algorithm>",-1),d={href:"https://m.cplusplus.com/reference/algorithm/",target:"_blank",rel:"noopener noreferrer"},B=p(`<h3 id="\u1107\u1175\u1109\u116E\u110C\u1165\u11BC-\u110B\u1167\u11AB\u1109\u1161\u11AB-non-modifying-sequence-operation" tabindex="-1"><a class="header-anchor" href="#\u1107\u1175\u1109\u116E\u110C\u1165\u11BC-\u110B\u1167\u11AB\u1109\u1161\u11AB-non-modifying-sequence-operation" aria-hidden="true">#</a> \uBE44\uC218\uC815 \uC5F0\uC0B0(Non-modifying sequence operation)</h3><ul><li>all_of</li><li>any_of</li><li>none_of</li><li>for_each</li><li>find</li><li>find_if</li><li>count</li><li>count_if ...</li></ul><h3 id="\u1109\u116E\u110C\u1165\u11BC-\u110B\u1167\u11AB\u1109\u1161\u11AB-modifying-sequence-operation" tabindex="-1"><a class="header-anchor" href="#\u1109\u116E\u110C\u1165\u11BC-\u110B\u1167\u11AB\u1109\u1161\u11AB-modifying-sequence-operation" aria-hidden="true">#</a> \uC218\uC815 \uC5F0\uC0B0(Modifying sequence operation)</h3><ul><li>copy</li><li>copy_n</li><li>copy_if</li><li>swap</li><li>swap_ranges</li><li>transform</li><li>replace</li><li>fill</li><li>fill_n</li><li>remove</li><li>remove_if</li><li>reverse</li><li>rotate ...</li></ul><h3 id="\u1107\u116E\u11AB\u1112\u1161\u11AF-partition" tabindex="-1"><a class="header-anchor" href="#\u1107\u116E\u11AB\u1112\u1161\u11AF-partition" aria-hidden="true">#</a> \uBD84\uD560(Partition)</h3><ul><li>partition ...</li></ul><h3 id="\u110C\u1165\u11BC\u1105\u1167\u11AF-sorting" tabindex="-1"><a class="header-anchor" href="#\u110C\u1165\u11BC\u1105\u1167\u11AF-sorting" aria-hidden="true">#</a> \uC815\uB82C(Sorting)</h3><ul><li>sort ...</li></ul><h3 id="\u110B\u1175\u1107\u116E\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-binary-search" tabindex="-1"><a class="header-anchor" href="#\u110B\u1175\u1107\u116E\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-binary-search" aria-hidden="true">#</a> \uC774\uBD84 \uD0D0\uC0C9(Binary search)</h3><p>operating on partitioned/sorted ranges</p><ul><li>lower_bound</li><li>upper_bound</li><li>binary_search ...</li></ul><h3 id="\u1107\u1167\u11BC\u1112\u1161\u11B8-merge" tabindex="-1"><a class="header-anchor" href="#\u1107\u1167\u11BC\u1112\u1161\u11B8-merge" aria-hidden="true">#</a> \uBCD1\uD569(Merge)</h3><p>operation on sorted ranges ...</p><h3 id="\u1112\u1175\u11B8-heap" tabindex="-1"><a class="header-anchor" href="#\u1112\u1175\u11B8-heap" aria-hidden="true">#</a> \uD799(Heap)</h3><p>...</p><h3 id="\u110E\u116C\u1109\u1169-\u110E\u116C\u1103\u1162-min-max" tabindex="-1"><a class="header-anchor" href="#\u110E\u116C\u1109\u1169-\u110E\u116C\u1103\u1162-min-max" aria-hidden="true">#</a> \uCD5C\uC18C/\uCD5C\uB300(Min/max)</h3><ul><li>min</li><li>min_element</li><li>max</li><li>max_element ...</li></ul><h2 id="\u110B\u1168\u110C\u1166" tabindex="-1"><a class="header-anchor" href="#\u110B\u1168\u110C\u1166" aria-hidden="true">#</a> \uC608\uC81C</h2><h3 id="\u110C\u1165\u11BC\u1105\u1167\u11AF-sort" tabindex="-1"><a class="header-anchor" href="#\u110C\u1165\u11BC\u1105\u1167\u11AF-sort" aria-hidden="true">#</a> \uC815\uB82C sort</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {1, 2, 3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u110C\u1165\u11BC\u1105\u1167\u11AF-sort-with-\u1100\u116E\u110C\u1169\u110E\u1166-\u1103\u1161\u110C\u116E\u11BC\u110C\u1165\u11BC\u1105\u1167\u11AF\u110C\u1169\u1100\u1165\u11AB" tabindex="-1"><a class="header-anchor" href="#\u110C\u1165\u11BC\u1105\u1167\u11AF-sort-with-\u1100\u116E\u110C\u1169\u110E\u1166-\u1103\u1161\u110C\u116E\u11BC\u110C\u1165\u11BC\u1105\u1167\u11AF\u110C\u1169\u1100\u1165\u11AB" aria-hidden="true">#</a> \uC815\uB82C sort with \uAD6C\uC870\uCCB4, \uB2E4\uC911\uC815\uB82C\uC870\uAC74</h3><details class="custom-container details"><summary>\uBC29\uBC95 1. <code>&lt;</code>\uC5F0\uC0B0\uC790 \uC624\uBC84\uB85C\uB529</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    string name<span class="token punctuation">;</span>

    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> id <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
        <span class="token keyword">return</span> name <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> vs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (1, a) (1, c) (2, b)</span>
</code></pre></div></details><details class="custom-container details"><summary>\uBC29\uBC95 2. Compare \uD568\uC218 \uB610\uB294 \uAD6C\uC870\uCCB4 \uC0AC\uC6A9</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    string name<span class="token punctuation">;</span>

    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> id <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token comment">// \uC624\uB984\uCC28\uC21C</span>
        <span class="token keyword">return</span> name <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// \uC624\uB984\uCC28\uC21C</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">fnComp</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>id <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>id <span class="token operator">&gt;</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token comment">// \uB0B4\uB9BC\uCC28\uC21C</span>
    <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>name <span class="token operator">&gt;</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// \uB0B4\uB9BC\uCC28\uC21C</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">stComp</span> <span class="token punctuation">{</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>id <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>id <span class="token operator">&gt;</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token comment">// \uB0B4\uB9BC\uCC28\uC21C</span>
        <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>name <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// \uC624\uB984\uCC28\uC21C</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> vs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// (1, a) (1, c) (2, b) (2, d)</span>
<span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fnComp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// (2, d) (2, b) (1, c) (1, a)</span>
<span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">stComp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (2, b) (2, d) (1, a) (1, c)</span>
</code></pre></div></details><h3 id="\u110C\u1169\u1100\u1165\u11AB-\u1100\u1165\u11B7\u1109\u1161-all-of" tabindex="-1"><a class="header-anchor" href="#\u110C\u1169\u1100\u1165\u11AB-\u1100\u1165\u11B7\u1109\u1161-all-of" aria-hidden="true">#</a> \uC870\uAC74 \uAC80\uC0AC all_of</h3><details class="custom-container details"><summary>1\uCC28\uC6D0 vector</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">stPred</span> <span class="token punctuation">{</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> arg<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> arg<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">fnPred</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">all_of</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fnPred<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;v1&#39;s elements are odd.\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">all_of</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">stPred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;v1&#39;s elements are odd.\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></details><details class="custom-container details"><summary>2\uCC28\uC6D0 vector (\uC81C\uB300\uB85C \uB3D9\uC791 \uC548\uD568)</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> v2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* \uD3EC\uC778\uD130\uAC00 \uC5F0\uC18D\uC801\uC774\uC9C0 \uC54A\uC74C */</span>
<span class="token function">all_of</span><span class="token punctuation">(</span>v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fnPred<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></details><details class="custom-container details"><summary>2\uCC28\uC6D0 \uBC30\uC5F4</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> v3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">all_of</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fnPred<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></details><h3 id="\u1100\u1161\u11A8-\u110B\u116D\u1109\u1169\u110B\u1166-\u1112\u1161\u11B7\u1109\u116E-\u110C\u1165\u11A8\u110B\u116D\u11BC-for-each" tabindex="-1"><a class="header-anchor" href="#\u1100\u1161\u11A8-\u110B\u116D\u1109\u1169\u110B\u1166-\u1112\u1161\u11B7\u1109\u116E-\u110C\u1165\u11A8\u110B\u116D\u11BC-for-each" aria-hidden="true">#</a> \uAC01 \uC694\uC18C\uC5D0 \uD568\uC218 \uC801\uC6A9 for_each</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Increase</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">++</span>arg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">++</span>arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> increase<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>:::</p><h3 id="range-\u1100\u1175\u1107\u1161\u11AB-\u1107\u1169\u11A8\u1109\u1161-copy" tabindex="-1"><a class="header-anchor" href="#range-\u1100\u1175\u1107\u1161\u11AB-\u1107\u1169\u11A8\u1109\u1161-copy" aria-hidden="true">#</a> range \uAE30\uBC18 \uBCF5\uC0AC copy</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    string name<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> vs1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * \uAF2D \uBA54\uBAA8\uB9AC \uD06C\uAE30\uB97C \uD655\uBCF4\uD574\uC57C \uD568
 * \uADF8\uB807\uC9C0 \uC54A\uC73C\uBA74 \uC5D0\uB7EC
 */</span>
vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> <span class="token function">vs2</span><span class="token punctuation">(</span>vs1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">copy</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> w<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="max-element" tabindex="-1"><a class="header-anchor" href="#max-element" aria-hidden="true">#</a> max_element</h3><details class="custom-container details"><summary>vector&lt;int&gt;</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator vIt <span class="token operator">=</span> <span class="token function">max_element</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>vIt<span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre></div></details><details class="custom-container details"><summary>unordered_map&lt;string, int&gt;</summary><p>\uBE44\uAD50 \uD568\uC218 \uB610\uB294 \uAD6C\uC870\uCCB4\uB97C \uC0AC\uC6A9\uD574\uC57C \uD558\uB294\uB370, \uAD6C\uC870\uCCB4\uC758 \uACBD\uC6B0 \uC81C\uB300\uB85C \uB3D9\uC791\uD558\uC9C0 \uC54A\uC558\uB2E4.</p><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">stComp</span> <span class="token punctuation">{</span>
    <span class="token comment">/* \uD568\uC218 \uC778\uC790\uC5D0 auto\uB97C \uC0AC\uC6A9\uD558\uBA74 \uC5D0\uB7EC \uBC1C\uC0DD */</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> lhs<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">fnComp</span><span class="token punctuation">(</span><span class="token keyword">const</span> pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> um <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;student 1&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;student 2&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;student 3&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* \uBE44\uAD50 \uD568\uC218 */</span>
unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it1 <span class="token operator">=</span> <span class="token function">max_element</span><span class="token punctuation">(</span>um<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> um<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fnComp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* \uBE44\uAD50 \uAD6C\uC870\uCCB4\uB97C \uC0AC\uC6A9\uD558\uBA74 \uC6D0\uD558\uB294 \uB300\uB85C \uB3D9\uC791\uD558\uC9C0 \uC54A\uB294\uB370 \uC774\uC720\uB294 \uBAA8\uB974\uACA0\uC74C */</span>
unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it2 <span class="token operator">=</span> <span class="token function">max_element</span><span class="token punctuation">(</span>um<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> um<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">stComp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* \uBE44\uAD50 \uD568\uC218(\uB78C\uB2E4) */</span>
unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it3 <span class="token operator">=</span> <span class="token function">max_element</span><span class="token punctuation">(</span>um<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> um<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></details><h3 id="\u110B\u1175\u1107\u116E\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-lower-bound-upper-bound" tabindex="-1"><a class="header-anchor" href="#\u110B\u1175\u1107\u116E\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-lower-bound-upper-bound" aria-hidden="true">#</a> \uC774\uBD84 \uD0D0\uC0C9 lower_bound, upper_bound</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator lowIt <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator UppIt <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Lowerbound index: %d\\n&quot;</span><span class="token punctuation">,</span> lowIt<span class="token operator">-</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Upperbound index: %d\\n&quot;</span><span class="token punctuation">,</span> UppIt<span class="token operator">-</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7 \uC720\uC758</span>
</code></pre></div><h3 id="\u110B\u1175\u1107\u116E\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-with-\u1100\u116E\u110C\u1169\u110E\u1166" tabindex="-1"><a class="header-anchor" href="#\u110B\u1175\u1107\u116E\u11AB-\u1110\u1161\u11B7\u1109\u1162\u11A8-with-\u1100\u116E\u110C\u1169\u110E\u1166" aria-hidden="true">#</a> \uC774\uBD84 \uD0D0\uC0C9 with \uAD6C\uC870\uCCB4</h3><details class="custom-container details"><summary><code>&lt;</code>\uC5F0\uC0B0\uC790 \uC624\uBC84\uB85C\uB529</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    string name<span class="token punctuation">;</span>

    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> id <span class="token operator">&gt;</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token comment">// \uC624\uB984\uCC28\uC21C</span>
        <span class="token keyword">return</span> name <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// \uB0B4\uB9BC\uCC28\uC21C</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> vs <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (3, a) (3, b) (3, b) (2, a) (2, d) (2, d) (1, c) (1, c) (1, e)</span>

<span class="token comment">/* bound \uD568\uC218\uC5D0 init list\uB85C \uAD6C\uC870\uCCB4\uB97C \uC804\uB2EC\uD560 \uC218 \uC5C6\uC5B4 \uC774\uB807\uAC8C \uCD08\uAE30\uD654\uD574\uC57C \uD568 */</span>
Student s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator lowIt <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator UppIt <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Lowerbound index: %d\\n&quot;</span><span class="token punctuation">,</span> lowIt<span class="token operator">-</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Upperbound index: %d\\n&quot;</span><span class="token punctuation">,</span> UppIt<span class="token operator">-</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6 \uC720\uC758</span>
</code></pre></div></details><details class="custom-container details"><summary>\uBE44\uAD50 \uD568\uC218 \uC0AC\uC6A9</summary><p>\uBE44\uAD50 \uAD6C\uC870\uCCB4\uB97C \uC0AC\uC6A9\uD574\uB3C4 \uB41C\uB2E4.</p><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token function">fnComp</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>id <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>id <span class="token operator">&gt;</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>name <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fnComp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (3, a) (3, b) (3, b) (2, a) (2, d) (2, d) (1, c) (1, c) (1, e)</span>

<span class="token comment">/* bound \uD568\uC218\uC5D0 init list\uB85C \uAD6C\uC870\uCCB4\uB97C \uC804\uB2EC\uD560 \uC218 \uC5C6\uC5B4 \uC774\uB807\uAC8C \uCD08\uAE30\uD654\uD574\uC57C \uD568 */</span>
Student s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator lowIt <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> fnComp<span class="token punctuation">)</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator UppIt <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> fnComp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Lowerbound index: %d\\n&quot;</span><span class="token punctuation">,</span> lowIt<span class="token operator">-</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Upperbound index: %d\\n&quot;</span><span class="token punctuation">,</span> UppIt<span class="token operator">-</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6 \uC720\uC758</span>
</code></pre></div></details><p>\uAD6C\uC870\uCCB4 \uAC19\uC740 \uC0AC\uC6A9\uC790 \uC815\uC758 \uC790\uB8CC\uD615\uC774 \uC544\uB2C8\uB77C\uBA74 bound \uD568\uC218\uC5D0 \uC9C1\uC811 \uAC12\uC744 \uAE30\uC785\uD574\uB3C4 \uB41C\uB2E4.</p><h2 id="a-\u110E\u1161\u11B7\u110C\u1169" tabindex="-1"><a class="header-anchor" href="#a-\u110E\u1161\u11B7\u110C\u1169" aria-hidden="true">#</a> A. \uCC38\uC870</h2>`,42),m={style:{"text-align":"left"}},g={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},h={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},f={href:"https://m.cplusplus.com/reference/algorithm/",target:"_blank",rel:"noopener noreferrer"},b={href:"http://Velog.io",target:"_blank",rel:"noopener noreferrer"},A={href:"https://velog.io/@juwon9733/%EA%B5%AC%EC%A1%B0%EC%B2%B4struct%EC%99%80-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9%EC%9D%84-%ED%86%B5%ED%95%9C-sort-in-C",target:"_blank",rel:"noopener noreferrer"},D=o({__name:"11-stl-algorithm.html",setup(y){return(w,v)=>{const t=i("ExternalLinkIcon");return c(),e("div",null,[r,s("p",null,[C,n(" \uD5E4\uB354\uC5D0\uC11C \uC81C\uACF5\uD558\uB294 \uD568\uC218\uB4E4 \uC885\uB958\uAC00 \uB108\uBB34 \uB9CE\uC544 \uAE5C\uC9DD \uB180\uB790\uB2E4. \uBCF8\uBB38\uC5D0\uC11C\uB294 \uC774\uB4E4\uC744 \uBAA8\uB450 \uB098\uC5F4\uD558\uAE30 \uBCF4\uB2E8 \uC790\uC8FC \uC0AC\uC6A9\uB418\uB294 \uBA87 \uAC00\uC9C0 \uD568\uC218\uB4E4\uC5D0 \uB300\uD574\uC11C\uB9CC \uC885\uB958 \uBCC4\uB85C \uB098\uC5F4\uD558\uACE0\uC790 \uD55C\uB2E4. \uBAA8\uB4E0 \uD568\uC218\uB4E4\uC5D0 \uB300\uD55C \uC790\uC138\uD55C \uB0B4\uC6A9\uACFC \uC608\uC81C \uCF54\uB4DC\uB294 "),s("a",d,[n("cplusplus.com"),a(t)]),n("\uC5D0\uC11C \uCC38\uACE0\uD558\uC790.")]),B,s("div",m,[s("p",null,[s("a",g,[n("cplusplus.com"),a(t)]),n(', "<algorithm>", '),s("em",null,[s("a",h,[n("cplusplus.com"),a(t)])]),n(", [Online]. Available: "),s("a",f,[n("https://m.cplusplus.com/reference/algorithm/"),a(t)]),n(" [Accessed May 26, 2022].")]),s("p",null,[n('juwon9733, "\uAD6C\uC870\uCCB4(struct)\uC640 \uC5F0\uC0B0\uC790 \uC624\uBC84\uB85C\uB529\uC744 \uD1B5\uD55C sort in C++", '),s("em",null,[s("a",b,[n("Velog.io"),a(t)])]),n(", Sep. 7, 2021. [Online]. Available: "),s("a",A,[n("https://velog.io/@juwon9733/\uAD6C\uC870\uCCB4struct\uC640-\uC5F0\uC0B0\uC790-\uC624\uBC84\uB85C\uB529\uC744-\uD1B5\uD55C-sort-in-C"),a(t)]),n(" [Accessed May 27, 2022].")])]),a(l(u))])}}}),x=k(D,[["__file","11-stl-algorithm.html.vue"]]);export{x as default};
