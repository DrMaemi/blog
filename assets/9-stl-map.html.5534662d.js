import{D as o}from"./DetailsOpen.d5ab58f9.js";import{f as u,o as e,c,a as s,b as n,d as a,u as l,e as p,r}from"./app.aab7bce6.js";import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";const k=p(`<h2 id="\u1106\u1162\u11B8-map-\u110F\u1165\u11AB\u1110\u1166\u110B\u1175\u1102\u1165" tabindex="-1"><a class="header-anchor" href="#\u1106\u1162\u11B8-map-\u110F\u1165\u11AB\u1110\u1166\u110B\u1175\u1102\u1165" aria-hidden="true">#</a> \uB9F5(map) \uCEE8\uD14C\uC774\uB108</h2><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token comment">// map::key_type</span>
    <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token comment">// map::mapped_type</span>
    <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> less<span class="token operator">&lt;</span>Key<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// map::key_compare</span>
    <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">=</span> allocator<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> Key<span class="token punctuation">,</span>T<span class="token operator">&gt;&gt;</span> <span class="token comment">// map::allocator_type</span>
<span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">map</span><span class="token punctuation">;</span>
</code></pre></div><p>\uB9F5(map)\uC740 \uD0A4(key)-\uAC12(value) \uC30D\uC758 \uB370\uC774\uD130\uB97C \uD2B9\uC815 \uC21C\uC11C\uC5D0 \uB530\uB77C \uC800\uC7A5\uD558\uB294 \uC5F0\uAD00 \uCEE8\uD14C\uC774\uB108\uB2E4. \uB9F5\uC5D0\uC11C \uD0A4(key)\uB294 \uB0B4\uBD80 \uC694\uC18C\uB97C \uACE0\uC720\uD558\uAC8C \uC2DD\uBCC4\uD558\uACE0 \uC815\uB82C\uD558\uB294\uB370 \uC0AC\uC6A9\uB418\uBA70, \uAC12(value)\uC740 \uD0A4\uC5D0 \uB300\uC751\uD558\uB294 \uC2E4\uC81C \uAC12\uC744 \uC800\uC7A5\uD55C\uB2E4. \uD0A4\uC640 \uAC12\uC740 \uC790\uB8CC\uD615\uC774 \uC11C\uB85C \uB2E4\uB97C \uC218 \uC788\uC9C0\uB9CC \uB9F5 \uAC1D\uCCB4\uC758 \uBA64\uBC84 \uC790\uB8CC\uD615 <code>value_type</code>\uC73C\uB85C \uD1B5\uC77C\uB418\uBA70, <code>value_type</code>\uC740 <code>pair</code> \uC790\uB8CC\uD615\uC744 \uC7AC\uC815\uC758\uD55C \uAC83\uC774\uB2E4.</p><p><code>typedef pair&lt;const Key, T&gt; value_type;</code></p><p>\uB9F5\uC740 \uB0B4\uBD80\uC801\uC73C\uB85C <em>strict weak ordering</em> \uAE30\uC900\uC5D0 \uB530\uB77C \uC5B8\uC81C\uB098 \uC815\uB82C\uB418\uC5B4 \uC788\uC73C\uBA70 \uD574\uB2F9 \uAE30\uC900\uC740 \uC9D1\uD569 \uB0B4\uBD80 \uBE44\uAD50 \uAC1D\uCCB4(comparison object)\uC5D0 \uB530\uB77C \uACB0\uC815\uB41C\uB2E4.</p><p>\uB9F5(<code>map</code>)\uC740 \uBE44\uC815\uB82C \uB9F5(<code>unordered_map</code>)\uBCF4\uB2E4 \uC694\uC18C \uC811\uADFC\uC5D0 \uB354 \uD070 \uC2DC\uAC04\uBCF5\uC7A1\uB3C4\uB97C \uAC00\uC9C0\uC9C0\uB9CC(\uB9F5\uC740 Binary Search Tree\uB97C \uC0AC\uC6A9\uD558\uC5EC \uD0D0\uC0C9 \uC2DC\uAC04\uBCF5\uC7A1\uB3C4\uAC00 <em>O(log n)</em>, \uBE44\uC815\uB82C \uB9F5\uC740 \uD574\uC26C \uD14C\uC774\uBE14\uC744 \uC0AC\uC6A9\uD558\uC5EC <em>O(1)</em>) \uB300\uC2E0 \uC815\uB82C \uC21C\uC11C\uC5D0 \uB530\uB978 \uC21C\uD68C\uB97C \uD560 \uC218 \uC788\uB2E4.</p><p>\uB9F5\uACFC \uBE44\uC815\uB82C \uB9F5\uC5D0\uC11C\uB294 \uACE0\uC720\uD55C \uD0A4 \uAC12\uC5D0 \uB530\uB77C \uAC12\uC744 \uC5BB\uC744 \uC218 \uC788\uC9C0\uB9CC \uC5EC\uB7EC \uAC1C\uC758 \uD0A4\uB97C \uAC00\uC9C4 \uB9F5 \uC790\uB8CC\uAD6C\uC870\uB97C \uC0AC\uC6A9\uD558\uACE0 \uC2F6\uB2E4\uBA74 \uB2E4\uC911\uB9F5(<code>multimap</code>)\uACFC \uBE44\uC815\uB82C \uB2E4\uC911\uB9F5(<code>unordered_multimap</code>) \uCEE8\uD14C\uC774\uB108\uB97C \uC0AC\uC6A9\uD574\uC57C \uD55C\uB2E4. \uAC01\uAC01 \uB9F5\uACFC \uBE44\uC815\uB82C \uB9F5\uC758 \uD2B9\uC131\uC744 \uAC00\uC9C0\uC9C0\uB9CC \uC5EC\uB7EC \uAC1C\uC758 \uD0A4\uB97C \uAC00\uC9C8 \uC218 \uC788\uC73C\uBA70 \uC694\uC18C \uC811\uADFC <code>operator[]</code>, <code>at()</code>\uC744 \uC0AC\uC6A9\uD560 \uC218 \uC5C6\uB2E4.</p><p>\uB9F5 \uCEE8\uD14C\uC774\uB108\uB97C \uC774\uC6A9\uD558\uB824\uBA74 \uB2E4\uC74C \uCF54\uB4DC\uB97C \uCD94\uAC00\uD574\uC57C \uD55C\uB2E4.</p><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>
</code></pre></div><h2 id="\u1106\u1166\u11B7\u1107\u1165-\u1112\u1161\u11B7\u1109\u116E" tabindex="-1"><a class="header-anchor" href="#\u1106\u1166\u11B7\u1107\u1165-\u1112\u1161\u11B7\u1109\u116E" aria-hidden="true">#</a> \uBA64\uBC84 \uD568\uC218</h2>`,10),C={href:"https://m.cplusplus.com/reference/map/map/",target:"_blank",rel:"noopener noreferrer"},d=p(`<h3 id="\u1109\u1162\u11BC\u1109\u1165\u11BC\u110C\u1161-constructor" tabindex="-1"><a class="header-anchor" href="#\u1109\u1162\u11BC\u1109\u1165\u11BC\u110C\u1161-constructor" aria-hidden="true">#</a> \uC0DD\uC131\uC790(Constructor)</h3><ul><li><em>empty container constructor</em></li><li><em>range constructor</em></li><li><em>copy constructor</em></li></ul><h3 id="\u1109\u1169\u1106\u1167\u11AF\u110C\u1161-destructor" tabindex="-1"><a class="header-anchor" href="#\u1109\u1169\u1106\u1167\u11AF\u110C\u1161-destructor" aria-hidden="true">#</a> \uC18C\uBA78\uC790(Destructor)</h3><ul><li>~map</li></ul><h3 id="\u1107\u1161\u11AB\u1107\u1169\u11A8\u110C\u1161-iterator" tabindex="-1"><a class="header-anchor" href="#\u1107\u1161\u11AB\u1107\u1169\u11A8\u110C\u1161-iterator" aria-hidden="true">#</a> \uBC18\uBCF5\uC790(Iterator)</h3><ul><li>begin</li><li>end</li><li>rbegin</li><li>rend</li><li>cbegin</li><li>cend</li><li>crbegin</li><li>crend</li></ul><h3 id="\u110B\u116D\u11BC\u1105\u1163\u11BC-capacity" tabindex="-1"><a class="header-anchor" href="#\u110B\u116D\u11BC\u1105\u1163\u11BC-capacity" aria-hidden="true">#</a> \uC6A9\uB7C9(Capacity)</h3><ul><li>empty</li><li>size</li><li>max_size</li></ul><h3 id="\u110B\u116D\u1109\u1169-\u110C\u1165\u11B8\u1100\u1173\u11AB-element-access" tabindex="-1"><a class="header-anchor" href="#\u110B\u116D\u1109\u1169-\u110C\u1165\u11B8\u1100\u1173\u11AB-element-access" aria-hidden="true">#</a> \uC694\uC18C \uC811\uADFC(Element access)</h3><ul><li>operater[]</li><li>at</li></ul><h3 id="\u1109\u116E\u110C\u1165\u11BC\u110C\u1161-modifier" tabindex="-1"><a class="header-anchor" href="#\u1109\u116E\u110C\u1165\u11BC\u110C\u1161-modifier" aria-hidden="true">#</a> \uC218\uC815\uC790(Modifier)</h3><ul><li>insert</li><li>erase</li><li>swap</li><li>clear</li><li>emplace</li><li>emplace_hint</li></ul><h3 id="\u1100\u116A\u11AB\u110E\u1161\u11AF\u110C\u1161-observer" tabindex="-1"><a class="header-anchor" href="#\u1100\u116A\u11AB\u110E\u1161\u11AF\u110C\u1161-observer" aria-hidden="true">#</a> \uAD00\uCC30\uC790(Observer)</h3><ul><li>key_comp</li><li>value_comp</li></ul><h3 id="\u110B\u1167\u11AB\u1109\u1161\u11AB-operation" tabindex="-1"><a class="header-anchor" href="#\u110B\u1167\u11AB\u1109\u1161\u11AB-operation" aria-hidden="true">#</a> \uC5F0\uC0B0(Operation)</h3><ul><li>find</li><li>count</li><li>lower_bound</li><li>upper_bound</li><li>equal_range</li></ul><h3 id="\u1112\u1161\u11AF\u1103\u1161\u11BC\u110C\u1161-allocator" tabindex="-1"><a class="header-anchor" href="#\u1112\u1161\u11AF\u1103\u1161\u11BC\u110C\u1161-allocator" aria-hidden="true">#</a> \uD560\uB2F9\uC790(Allocator)</h3><ul><li>get_allocator</li></ul><h2 id="\u110B\u1168\u110C\u1166" tabindex="-1"><a class="header-anchor" href="#\u110B\u1168\u110C\u1166" aria-hidden="true">#</a> \uC608\uC81C</h2><h3 id="\u1109\u1162\u11BC\u1109\u1165\u11BC\u110C\u1161-\u1109\u1161\u11B8\u110B\u1175\u11B8-insert" tabindex="-1"><a class="header-anchor" href="#\u1109\u1162\u11BC\u1109\u1165\u11BC\u110C\u1161-\u1109\u1161\u11B8\u110B\u1175\u11B8-insert" aria-hidden="true">#</a> \uC0DD\uC131\uC790, [], \uC0BD\uC785(insert)</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">fncomp</span><span class="token punctuation">(</span><span class="token keyword">char</span> lhs<span class="token punctuation">,</span> <span class="token keyword">char</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> lhs <span class="token operator">&lt;</span> rhs<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">classcomp</span> <span class="token punctuation">{</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lhs <span class="token operator">&gt;</span> rhs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> first<span class="token punctuation">;</span> <span class="token comment">// empty constructor</span>
    first<span class="token punctuation">[</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    first<span class="token punctuation">[</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    first<span class="token punctuation">[</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    first<span class="token punctuation">[</span><span class="token char">&#39;d&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span>

    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">second</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> first<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// range constructor</span>
    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">third</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// copy constructor</span>
    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> classcomp<span class="token operator">&gt;</span> fourth<span class="token punctuation">;</span> <span class="token comment">// class as Compare</span>
    
    <span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token operator">*</span>fn_pt<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">=</span> fncomp<span class="token punctuation">;</span>
    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token function">fifth</span><span class="token punctuation">(</span>fn_pt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function pointer as Compare</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The content of third:\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>third<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>third<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; =&gt; &quot;</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>second <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
        fourth<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>
        fifth<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Before insert, the content of fourth:\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>fourth<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>fourth<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; =&gt; &quot;</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>second <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

    fourth<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token char">&#39;z&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair<span class="token operator">&lt;</span>map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> ret <span class="token operator">=</span> fourth<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token char">&#39;z&#39;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">.</span>second <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;key &#39;&quot;</span> <span class="token operator">&lt;&lt;</span> ret<span class="token punctuation">.</span>first<span class="token operator">-&gt;</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39; is already existed in fourth with value &quot;</span> <span class="token operator">&lt;&lt;</span> ret<span class="token punctuation">.</span>first<span class="token operator">-&gt;</span>second <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;After insert, the content of fourth:\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>fourth<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>fourth<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; =&gt; &quot;</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>second <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Before insert, the content of fifth:\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>fifth<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>fifth<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; =&gt; &quot;</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>second <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    
    fifth<span class="token punctuation">[</span><span class="token char">&#39;z&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    fifth<span class="token punctuation">[</span><span class="token char">&#39;z&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;After insert, the content of fifth:\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>fifth<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>fifth<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; =&gt; &quot;</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>second <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><details class="custom-container details"><summary>\uC2E4\uD589 \uACB0\uACFC</summary><div class="language-text ext-text"><pre class="language-text"><code>The content of third:
a =&gt; 10
b =&gt; 20
c =&gt; 50
d =&gt; 70
Before insert, the content of fourth:
d =&gt; 70
c =&gt; 50
b =&gt; 20
a =&gt; 10
key &#39;z&#39; is already existed in fourth with value 100
After insert, the content of fourth:
z =&gt; 100
d =&gt; 70
c =&gt; 50
b =&gt; 20
a =&gt; 10
Before insert, the content of fifth:
a =&gt; 10
b =&gt; 20
c =&gt; 50
d =&gt; 70
After insert, the content of fifth:
a =&gt; 10
b =&gt; 20
c =&gt; 50
d =&gt; 70
z =&gt; 200
</code></pre></div></details><h2 id="a-\u110E\u1161\u11B7\u110C\u1169" tabindex="-1"><a class="header-anchor" href="#a-\u110E\u1161\u11B7\u110C\u1169" aria-hidden="true">#</a> A. \uCC38\uC870</h2>`,23),B={style:{"text-align":"left"}},h={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},m={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},f={href:"https://m.cplusplus.com/reference/map/map/",target:"_blank",rel:"noopener noreferrer"},g=s("em",null,"Tistory",-1),A={href:"https://blockdmask.tistory.com/87",target:"_blank",rel:"noopener noreferrer"},y=u({__name:"9-stl-map.html",setup(D){return(w,b)=>{const t=r("ExternalLinkIcon");return e(),c("div",null,[k,s("p",null,[n("\uAC01 \uBA64\uBC84\uD568\uC218\uC758 \uC608\uC81C \uCF54\uB4DC\uB97C \uC791\uC131\uD558\uAE30\uC5D4 \uC591\uC774 \uB9E4\uC6B0 \uB9CE\uAE30 \uB54C\uBB38\uC5D0 "),s("a",C,[n("cplusplus.com"),a(t)]),n("\uC5D0\uC11C \uAC01 \uBA64\uBC84 \uD568\uC218 \uB9C1\uD06C\uB97C \uD074\uB9AD\uD558\uC5EC \uC608\uC81C\uB97C \uD655\uC778\uD558\uC790.")]),d,s("div",B,[s("p",null,[s("a",h,[n("cplusplus.com"),a(t)]),n(', "std::map", '),s("em",null,[s("a",m,[n("cplusplus.com"),a(t)])]),n(", [Online]. Available: "),s("a",f,[n("https://m.cplusplus.com/reference/map/map/"),a(t)]),n(" [Accessed May 26, 2022].")]),s("p",null,[n('BlockDMask, "[C++] map container \uC815\uB9AC \uBC0F \uC0AC\uC6A9\uBC95", '),g,n(", Jul. 28, 2017. [Online]. Available: "),s("a",A,[n("https://blockdmask.tistory.com/87"),a(t)]),n(" [Accessed May 27, 2022].")])]),a(l(o))])}}}),v=i(y,[["__file","9-stl-map.html.vue"]]);export{v as default};
