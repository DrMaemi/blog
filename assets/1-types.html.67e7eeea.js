import{D as l}from"./DetailsOpen.d5ab58f9.js";import{f as u,o as p,c,a as s,b as n,d as a,u as o,e,r as i}from"./app.0616fd94.js";import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";const m=e('<p>\uC790\uB8CC\uD615(Types)\uC740 <strong>\uAE30\uBCF8 \uC790\uB8CC\uD615</strong>\uACFC <strong>\uC0AC\uC6A9\uC790 \uC815\uC758 \uC790\uB8CC\uD615</strong>\uC73C\uB85C \uAD6C\uBD84\uD55C\uB2E4.</p><p>\uD45C\uC900 \uB77C\uC774\uBE0C\uB7EC\uB9AC(STL)\uB85C \uC81C\uACF5\uB418\uB294 \uC0AC\uC6A9\uC790 \uC815\uC758 \uC790\uB8CC\uD615\uC740 \uCEF4\uD30C\uC77C\uB7EC\uC5D0 \uC758\uD574 \uCD5C\uC801\uD654\uB418\uBA70 \uC0AC\uC6A9\uD558\uAE30 \uD3B8\uD558\uB2E4.</p><p>\uC0AC\uC6A9\uC790 \uC815\uC758 \uC790\uB8CC\uD615\uC740 \uAE30\uBCF8 \uC790\uB8CC\uD615\uCC98\uB7FC \uC0AC\uC6A9\uD560 \uC218 \uC788\uB2E4.</p><p>\uC608\uB97C \uB4E4\uC5B4 \uBCF5\uC18C\uC218\uB97C \uCC98\uB9AC\uD558\uAE30 \uC704\uD55C \uC790\uB8CC\uD615 <code>std::complex</code>, \uBB38\uC790\uC5F4\uC744 \uCC98\uB9AC\uD558\uAE30 \uC704\uD55C <code>std::string</code> \uB4F1 \uB2E4\uC591\uD55C \uC5F0\uC0B0\uC790\uC640 \uC785\uCD9C\uB825\uC774 \uAC00\uB2A5\uD558\uBBC0\uB85C \uAE30\uBCF8 \uC790\uB8CC\uD615\uCC98\uB7FC \uC0AC\uC6A9\uD558\uB294\uB370 \uBB38\uC81C \uC5C6\uB2E4.</p><p>\uB2E4\uC74C\uC740 \uC790\uB8CC\uD615\uC5D0 \uB300\uD55C \uC124\uBA85\uC744 \uC704\uD574 \uD544\uC694\uD55C \uBA87 \uAC00\uC9C0 \uC6A9\uC5B4\uB97C \uC815\uB9AC\uD55C \uB0B4\uC6A9\uC774\uB2E4.</p><ul><li>\uC218(\uC218\uCE58, \uAC12) <ul><li>\uC591\uC744 \uB73B\uD558\uBA70, \uC22B\uC790\uB294 \uC218\uB97C \uB098\uD0C0\uB0B4\uB294 \uAE30\uD638</li></ul></li><li>\uB9AC\uD130\uB7F4(literal) <ul><li>\uC21C\uC11C\uAC00 \uD45C\uD604\uB41C \uBB38\uC790</li><li><code>x = 12.345&#39;678</code>\uC758 <code>12.345&#39;678</code>\uC744 \uC22B\uC790 \uB9AC\uD130\uB7F4\uC774\uB77C \uD568</li><li><code>constexpr</code> \uBCC0\uC218\uB85C, <code>constexpr</code> \uD568\uC218\uC5D0\uC11C \uBC18\uD658\uB418\uB294 \uAC12\uC758 \uC790\uB8CC\uD615\uC784</li></ul></li></ul><h2 id="\u1100\u1175\u1107\u1169\u11AB-\u110C\u1161\u1105\u116D\u1112\u1167\u11BC-primitive-data-types" tabindex="-1"><a class="header-anchor" href="#\u1100\u1175\u1107\u1169\u11AB-\u110C\u1161\u1105\u116D\u1112\u1167\u11BC-primitive-data-types" aria-hidden="true">#</a> \uAE30\uBCF8 \uC790\uB8CC\uD615(Primitive Data Types)</h2><p>\uD558\uB4DC\uC6E8\uC5B4\uC758 \uC790\uC6D0(Resource)\uC774 \uC720\uD55C\uD558\uACE0, C/C++\uC740 \uD558\uB4DC\uC6E8\uC5B4\uB97C \uB2E4\uB8E8\uB294 \uB370 \uD2B9\uD654\uB418\uC5B4 \uC788\uC5B4 \uC790\uB8CC\uD615\uC73C\uB85C \uD45C\uD604 \uAC00\uB2A5\uD55C \uC218\uCE58 \uB610\uD55C \uC720\uD55C\uD558\uB2E4.</p><p>C++\uC758 \uAE30\uBCF8 \uC790\uB8CC\uD615\uC740 \uB2E4\uC74C\uACFC \uAC19\uB2E4.</p><h3 id="\u1106\u116E\u11AB\u110C\u1161" tabindex="-1"><a class="header-anchor" href="#\u1106\u116E\u11AB\u110C\u1161" aria-hidden="true">#</a> \uBB38\uC790</h3>',10),d=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"\uC790\uB8CC\uD615"),s("th",{style:{"text-align":"center"}},"\uD06C\uAE30(Bytes)"),s("th",null,"\uBC94\uC704")])]),s("tbody",null,[s("tr",null,[s("td",null,[n("char"),s("br"),n("signed char")]),s("td",{style:{"text-align":"center"}},"1"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mo",null,"\u2212"),s("msup",null,[s("mn",null,"2"),s("mn",null,"7")]),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"7")]),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[-2^7, 2^7-1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"\u2212"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"7")])])])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"7")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),s("br"),n("(-128 ~ 127)")])]),s("tr",null,[s("td",null,"unsigned char"),s("td",{style:{"text-align":"center"}},"1"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"8")]),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[0, 2^8-1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"8")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),s("br"),n("(0 ~ 255)")])]),s("tr",null,[s("td",null,"wchar_t"),s("td",{style:{"text-align":"center"}},"2"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"15")]),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[0, 2^{15}-1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"15")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),s("br"),n("(0 ~ 65,535)")])])])],-1),C=s("h3",{id:"\u110C\u1165\u11BC\u1109\u116E",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#\u110C\u1165\u11BC\u1109\u116E","aria-hidden":"true"},"#"),n(" \uC815\uC218")],-1),k=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"\uC790\uB8CC\uD615"),s("th",{style:{"text-align":"center"}},"\uD06C\uAE30(Bytes)"),s("th",null,"\uBC94\uC704")])]),s("tbody",null,[s("tr",null,[s("td",null,[n("short"),s("br"),n("short int")]),s("td",{style:{"text-align":"center"}},"2"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mo",null,"\u2212"),s("msup",null,[s("mn",null,"2"),s("mn",null,"15")]),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"15")]),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[-2^{15}, 2^{15}-1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"\u2212"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"15")])])])])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"15")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),s("br"),n("(-32,768 ~ 32,767)")])]),s("tr",null,[s("td",null,[n("unsigned short"),s("br"),n("unsigned short int")]),s("td",{style:{"text-align":"center"}},"2"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"16")]),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[0, 2^{16}-1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"16")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),s("br"),n("(0 ~ 65,535)")])]),s("tr",null,[s("td",null,[n("int"),s("br"),n("signed int")]),s("td",{style:{"text-align":"center"}},"4"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mo",null,"\u2212"),s("msup",null,[s("mn",null,"2"),s("mn",null,"31")]),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"31")]),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[-2^{31}, 2^{31}-1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"\u2212"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"31")])])])])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"31")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),s("br"),n("(-2,147,483,648 ~ 2,147,483,647)")])]),s("tr",null,[s("td",null,[n("unsigned"),s("br"),n("unsigned int")]),s("td",{style:{"text-align":"center"}},"4"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"32")]),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[0, 2^{32}-1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"32")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),s("br"),n("(0 ~ 4,294,967,295)")])]),s("tr",null,[s("td",null,[n("long"),s("br"),n("long int"),s("br"),n("signed long"),s("br"),n("signed long int")]),s("td",{style:{"text-align":"center"}},"4"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mo",null,"\u2212"),s("msup",null,[s("mn",null,"2"),s("mn",null,"31")]),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"31")]),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[-2^{31}, 2^{31}-1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"\u2212"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"31")])])])])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"31")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),s("br"),n("(-2,147,483,648 ~ 2,147,483,647)")])]),s("tr",null,[s("td",null,[n("unsigned long"),s("br"),n("unsigned long int")]),s("td",{style:{"text-align":"center"}},"4"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"32")]),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[0, 2^{32}-1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"32")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),s("br"),n("(0 ~ 4,294,967,295)")])]),s("tr",null,[s("td",null,[n("long long"),s("br"),n("long long int"),s("br"),n("signed long long"),s("br"),n("signed long long int")]),s("td",{style:{"text-align":"center"}},"8"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mo",null,"\u2212"),s("msup",null,[s("mn",null,"2"),s("mn",null,"63")]),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"63")]),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[-2^{63}, 2^{63}-1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"\u2212"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"63")])])])])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"63")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),s("br"),n("(-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807)")])]),s("tr",null,[s("td",null,[n("unsigned long long"),s("br"),n("unsigned long long int")]),s("td",{style:{"text-align":"center"}},"8"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"64")]),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[0, 2^{64}-1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"64")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),s("br"),n("(0 ~ 18,446,744,073,709,551,615)")])])])],-1),h=e(`<h3 id="\u1109\u1175\u11AF\u1109\u116E" tabindex="-1"><a class="header-anchor" href="#\u1109\u1175\u11AF\u1109\u116E" aria-hidden="true">#</a> \uC2E4\uC218</h3><table><thead><tr><th>\uC790\uB8CC\uD615</th><th style="text-align:center;">\uD06C\uAE30(Bytes)</th><th>\uBC94\uC704</th></tr></thead><tbody><tr><td>float</td><td style="text-align:center;">4</td><td>3.4E +/- 38 (7 digits)</td></tr><tr><td>double<br>long double</td><td style="text-align:center;">8</td><td>1.7E +/- 308 (15 digits)</td></tr></tbody></table><h3 id="\u1102\u1169\u11AB\u1105\u1175" tabindex="-1"><a class="header-anchor" href="#\u1102\u1169\u11AB\u1105\u1175" aria-hidden="true">#</a> \uB17C\uB9AC</h3><table><thead><tr><th>\uC790\uB8CC\uD615</th><th style="text-align:center;">\uD06C\uAE30(Bytes)</th><th>\uBC94\uC704</th></tr></thead><tbody><tr><td>bool</td><td style="text-align:center;">1</td><td>false / true</td></tr></tbody></table><h2 id="\u1109\u1161\u110B\u116D\u11BC\u110C\u1161-\u110C\u1165\u11BC\u110B\u1174-\u110C\u1161\u1105\u116D\u1112\u1167\u11BC-user-defined-data-types" tabindex="-1"><a class="header-anchor" href="#\u1109\u1161\u110B\u116D\u11BC\u110C\u1161-\u110C\u1165\u11BC\u110B\u1174-\u110C\u1161\u1105\u116D\u1112\u1167\u11BC-user-defined-data-types" aria-hidden="true">#</a> \uC0AC\uC6A9\uC790 \uC815\uC758 \uC790\uB8CC\uD615(User Defined Data Types)</h2><p>C++\uC758 \uC0AC\uC6A9\uC790 \uC815\uC758 \uC790\uB8CC\uD615\uC740 \uAD6C\uC870\uCCB4 <code>struct</code>, \uD074\uB798\uC2A4 <code>class</code>, \uACF5\uC6A9\uCCB4 <code>union</code>, \uC5F4\uAC70\uD615 <code>enum</code>, \uAC00 \uC788\uB2E4.</p><table><thead><tr><th>\uC790\uB8CC\uD615</th><th style="text-align:center;">\uD06C\uAE30(Bytes)</th></tr></thead><tbody><tr><td>struct</td><td style="text-align:center;">\uBA64\uBC84\uBCC0\uC218 \uC911 \uCD5C\uB300 \uD06C\uAE30x\uBA64\uBC84 \uBCC0\uC218 \uAC1C\uC218</td></tr><tr><td>union</td><td style="text-align:center;">\uBA64\uBC84\uBCC0\uC218 \uC911 \uCD5C\uB300 \uD06C\uAE30</td></tr><tr><td>enum</td><td style="text-align:center;">4</td></tr></tbody></table><p>\uC0AC\uC6A9\uC790 \uC815\uC758 \uC790\uB8CC\uD615\uACFC \uAD00\uB828\uB41C \uD0A4\uC6CC\uB4DC\uB85C <code>typedef</code>, <code>using</code>\uC774 \uC788\uB2E4. \uC774 \uD0A4\uC6CC\uB4DC\uB4E4\uC740 \uBBF8\uB9AC \uC815\uC758\uB41C \uC790\uB8CC\uD615\uC5D0 \uBCC4\uCE6D\uC744 \uBD80\uC5EC\uD558\uB294 \uAE30\uB2A5\uC744 \uAC00\uC9C4\uB2E4.</p><h2 id="\u110C\u1161\u1105\u116D\u1112\u1167\u11BC-\u110E\u116E\u1105\u1169\u11AB" tabindex="-1"><a class="header-anchor" href="#\u110C\u1161\u1105\u116D\u1112\u1167\u11BC-\u110E\u116E\u1105\u1169\u11AB" aria-hidden="true">#</a> \uC790\uB8CC\uD615 \uCD94\uB860</h2><p>C++11\uBD80\uD130 <code>auto</code>, <code>decltype()</code> \uD0A4\uC6CC\uB4DC\uB97C \uC774\uC6A9\uD558\uBA74 \uCEF4\uD30C\uC77C \uB54C \uAC1D\uCCB4\uC758 \uC790\uB8CC\uD615\uC744 \uACB0\uC815\uD560 \uC218 \uC788\uB2E4.</p><p><code>auto y = x;</code>\uB294 \uCD08\uAE30\uD654\uD558\uB294 \uC790\uB8CC <code>x</code>\uC5D0 \uC758\uD574 <code>y</code>\uC758 \uC790\uB8CC\uD615\uC774 \uACB0\uC815\uB41C\uB2E4.</p><p><code>decltype(x) y;</code>\uB294 <code>x</code>\uC758 \uC790\uB8CC\uD615\uC5D0 \uC758\uD574 <code>y</code>\uC758 \uC790\uB8CC\uD615\uC774 \uACB0\uC815\uB41C\uB2E4.</p><h2 id="\u110C\u1161\u1105\u116D\u1112\u1167\u11BC-\u1112\u116A\u11A8\u110B\u1175\u11AB" tabindex="-1"><a class="header-anchor" href="#\u110C\u1161\u1105\u116D\u1112\u1167\u11BC-\u1112\u116A\u11A8\u110B\u1175\u11AB" aria-hidden="true">#</a> \uC790\uB8CC\uD615 \uD655\uC778</h2><p><code>&lt;typeinfo&gt;</code> \uD5E4\uB354\uC5D0 \uC788\uB294 <code>typeid()</code> \uD568\uC218\uB97C \uC774\uC6A9\uD558\uBA74 \uC790\uB8CC\uD615 id\uB97C \uC5BB\uC744 \uC218 \uC788\uACE0, \uC790\uB8CC\uD615\uC5D0 \uB530\uB77C \uB3D9\uC801\uC73C\uB85C \uCC98\uB9AC\uD558\uB294 RTTI(Runtime Type Information) \uAE30\uBC95\uC5D0 \uD65C\uC6A9\uD560 \uC218 \uC788\uB2E4.</p><details class="custom-container details"><summary>\uC608\uC81C \uCF54\uB4DC</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;typeinfo&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">char</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token char">&#39;g&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token comment">// A generic function which finds minimum of two values</span>
<span class="token comment">// return type is type of variable which is minimum</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">&gt;</span>
<span class="token keyword">auto</span> <span class="token function">findMin</span><span class="token punctuation">(</span>A a<span class="token punctuation">,</span> B b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// driver function to test various inference</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">auto</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> b <span class="token operator">=</span> <span class="token number">3.37</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> pa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;b is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;pa is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token comment">// Data type of x is same as return type of fun1()</span>
    <span class="token comment">// and type of y is same as return type of fun2()</span>
    <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> c<span class="token punctuation">;</span>
    <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> d<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;c is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;d is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
     <span class="token comment">// f will be of type int : data type of e</span>
    <span class="token keyword">decltype</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> f <span class="token operator">=</span> e <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;e is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;f is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token comment">// This call returns 3.44 of doubale type</span>
    <span class="token keyword">auto</span> g <span class="token operator">=</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3.44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// This call returns 3 of double type</span>
    <span class="token keyword">auto</span> h <span class="token operator">=</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token number">5.4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;g is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; and value is &quot;</span> <span class="token operator">&lt;&lt;</span> g <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;h is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; and value is &quot;</span> <span class="token operator">&lt;&lt;</span> h <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token comment">// definite i to const char* type</span>
    <span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;i is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; and value is &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeid</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;i is same with const char* type&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Are char* and char[] type same? &quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// comparison char* and char[]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeid</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Yes, they are same.&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Nop, char* is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; and char[] is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    string j <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;j is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; and value is &quot;</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>\uC2E4\uD589 \uACB0\uACFC</summary><div class="language-text ext-text"><pre class="language-text"><code>a is i
b is d
pa is Pi
c is i
d is c
e is i
f is i
g is d and value is 3.44
h is d and value is 3
i is PKc and value is Hello
i is same with const char* type
Are char* and char[] type same? Nop, char* is Pc and char[] is A_c
j is NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE and value is Hello
</code></pre></div></details><h2 id="a-\u110E\u1161\u11B7\u110C\u1169" tabindex="-1"><a class="header-anchor" href="#a-\u110E\u1161\u11B7\u110C\u1169" aria-hidden="true">#</a> A. \uCC38\uC870</h2>`,17),g={style:{"text-align":"left"}},y={href:"http://Wikidocs.net",target:"_blank",rel:"noopener noreferrer"},B={href:"https://wikidocs.net/50830",target:"_blank",rel:"noopener noreferrer"},v={href:"http://melonicedlatte.com",target:"_blank",rel:"noopener noreferrer"},b={href:"http://melonicedlatte.com/algorithm/2018/03/04/022437.html",target:"_blank",rel:"noopener noreferrer"},D=u({__name:"1-types.html",setup(A){return(x,w)=>{const t=i("ExternalLinkIcon");return p(),c("div",null,[m,d,C,k,h,s("div",g,[s("p",null,[n('SEADOG, "C++ \uC774\uC57C\uAE30 - 01.01.01. \uC790\uB8CC\uD615(Types)", '),s("em",null,[s("a",y,[n("Wikidocs.net"),a(t)])]),n(", Feb. 3, 2022. [Online]. Available: "),s("a",B,[n("https://wikidocs.net/50830"),a(t)]),n(" [Accessed May 11, 2022].")]),s("p",null,[n('melonicedlatte, "C/C++ \uC5D0 \uC874\uC7AC\uD558\uB294 \uBAA8\uB4E0 \uC790\uB8CC\uD615 \uAC1C\uB150 \uCD1D \uC815\uB9AC", '),s("em",null,[s("a",v,[n("melonicedlatte.com"),a(t)])]),n(", Mar. 4, 2018. [Online]. Available: "),s("a",b,[n("http://melonicedlatte.com/algorithm/2018/03/04/022437.html"),a(t)]),n(" [Accessed May 11, 2022].")])]),a(o(l))])}}}),_=r(D,[["__file","1-types.html.vue"]]);export{_ as default};
