import{D as u}from"./DetailsOpen.d5ab58f9.js";import{f as o,o as e,c,a as s,b as n,d as a,u as l,e as p,r}from"./app.63e6c612.js";import{_ as k}from"./_plugin-vue_export-helper.cdc0426e.js";const i=p(`<h2 id="\u1107\u1175\u110C\u1165\u11BC\u1105\u1167\u11AF-\u1106\u1162\u11B8-unordered-map-\u110F\u1165\u11AB\u1110\u1166\u110B\u1175\u1102\u1165" tabindex="-1"><a class="header-anchor" href="#\u1107\u1175\u110C\u1165\u11BC\u1105\u1167\u11AF-\u1106\u1162\u11B8-unordered-map-\u110F\u1165\u11AB\u1110\u1166\u110B\u1175\u1102\u1165" aria-hidden="true">#</a> \uBE44\uC815\uB82C \uB9F5(unordered_map) \uCEE8\uD14C\uC774\uB108</h2><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token comment">// unordered_map::key_type</span>
    <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token comment">// unordered_map::mapped_type</span>
    <span class="token keyword">class</span> <span class="token class-name">Hash</span> <span class="token operator">=</span> hash<span class="token operator">&lt;</span>Key<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// unordered_map::hasher</span>
    <span class="token keyword">class</span> <span class="token class-name">Pred</span> <span class="token operator">=</span> equal_to<span class="token operator">&lt;</span>Key<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// unordered_map::key_equal</span>
    <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">=</span> allocator<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">const</span> Key<span class="token punctuation">,</span>T<span class="token operator">&gt;&gt;</span> <span class="token comment">// unordered_map::allocator_type</span>
<span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">unordered_map</span><span class="token punctuation">;</span>
</code></pre></div><p>\uB9F5(map)\uC740 \uD0A4(key)-\uAC12(value) \uC30D\uC758 \uB370\uC774\uD130\uB97C \uD2B9\uC815 \uC21C\uC11C\uC5D0 \uB530\uB77C \uC800\uC7A5\uD558\uB294 \uC5F0\uAD00 \uCEE8\uD14C\uC774\uB108\uB2E4. \uB9F5\uC5D0\uC11C \uD0A4(key)\uB294 \uB0B4\uBD80 \uC694\uC18C\uB97C \uACE0\uC720\uD558\uAC8C \uC2DD\uBCC4\uD558\uACE0 \uC815\uB82C\uD558\uB294\uB370 \uC0AC\uC6A9\uB418\uBA70, \uAC12(value)\uC740 \uD0A4\uC5D0 \uB300\uC751\uD558\uB294 \uC2E4\uC81C \uAC12\uC744 \uC800\uC7A5\uD55C\uB2E4. \uD0A4\uC640 \uAC12\uC740 \uC790\uB8CC\uD615\uC774 \uC11C\uB85C \uB2E4\uB97C \uC218 \uC788\uC9C0\uB9CC \uB9F5 \uAC1D\uCCB4\uC758 \uBA64\uBC84 \uC790\uB8CC\uD615 <code>value_type</code>\uC73C\uB85C \uD1B5\uC77C\uB418\uBA70, <code>value_type</code>\uC740 <code>pair</code> \uC790\uB8CC\uD615\uC744 \uC7AC\uC815\uC758\uD55C \uAC83\uC774\uB2E4.</p><p><code>typedef pair&lt;const Key, T&gt; value_type;</code></p><p>\uB9F5(<code>map</code>)\uC740 \uBE44\uC815\uB82C \uB9F5(<code>unordered_map</code>)\uBCF4\uB2E4 \uC694\uC18C \uC811\uADFC\uC5D0 \uB354 \uD070 \uC2DC\uAC04\uBCF5\uC7A1\uB3C4\uB97C \uAC00\uC9C0\uC9C0\uB9CC(\uB9F5\uC740 Binary Search Tree\uB97C \uC0AC\uC6A9\uD558\uC5EC \uD0D0\uC0C9 \uC2DC\uAC04\uBCF5\uC7A1\uB3C4\uAC00 <em>O(log n)</em>, \uBE44\uC815\uB82C \uB9F5\uC740 \uD574\uC26C \uD14C\uC774\uBE14\uC744 \uC0AC\uC6A9\uD558\uC5EC <em>O(1)</em>) \uB300\uC2E0 \uC815\uB82C \uC21C\uC11C\uC5D0 \uB530\uB978 \uC21C\uD68C\uB97C \uD560 \uC218 \uC788\uB2E4.</p><p>\uBE44\uC815\uB82C \uB9F5 \uCEE8\uD14C\uC774\uB108\uB97C \uC774\uC6A9\uD558\uB824\uBA74 \uB2E4\uC74C \uCF54\uB4DC\uB97C \uCD94\uAC00\uD574\uC57C \uD55C\uB2E4.</p><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span>
</code></pre></div><h2 id="\u1106\u1166\u11B7\u1107\u1165-\u1112\u1161\u11B7\u1109\u116E" tabindex="-1"><a class="header-anchor" href="#\u1106\u1166\u11B7\u1107\u1165-\u1112\u1161\u11B7\u1109\u116E" aria-hidden="true">#</a> \uBA64\uBC84 \uD568\uC218</h2>`,8),C={href:"https://cplusplus.com/reference/unordered_map/unordered_map/",target:"_blank",rel:"noopener noreferrer"},d=p(`<h2 id="\u110B\u1168\u110C\u1166" tabindex="-1"><a class="header-anchor" href="#\u110B\u1168\u110C\u1166" aria-hidden="true">#</a> \uC608\uC81C</h2><h3 id="\u1109\u1165\u11AB\u110B\u1165\u11AB" tabindex="-1"><a class="header-anchor" href="#\u1109\u1165\u11AB\u110B\u1165\u11AB" aria-hidden="true">#</a> \uC120\uC5B8</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> first<span class="token punctuation">;</span> <span class="token comment">// empty</span>
unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;lemon&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yellow&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// init list</span>
unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> <span class="token function">third</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// copy</span>
unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> <span class="token function">fourth</span><span class="token punctuation">(</span>third<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> third<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// range</span>
</code></pre></div><h3 id="\u1109\u1165\u11AB\u110B\u1165\u11AB-with-\u1100\u116E\u110C\u1169\u110E\u1166" tabindex="-1"><a class="header-anchor" href="#\u1109\u1165\u11AB\u110B\u1165\u11AB-with-\u1100\u116E\u110C\u1169\u110E\u1166" aria-hidden="true">#</a> \uC120\uC5B8 with \uAD6C\uC870\uCCB4</h3><details class="custom-container details"><summary>\uBC29\uBC95 1. std \uB124\uC784\uC2A4\uD398\uC774\uC2A4 hash&lt;Type&gt; \uC815\uC758</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    string name<span class="token punctuation">;</span>

    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id <span class="token operator">==</span> rhs<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span> name <span class="token operator">==</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> std <span class="token punctuation">{</span>
    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span>
    <span class="token keyword">struct</span> <span class="token class-name">hash</span><span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> arg<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
            hash<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span> hll<span class="token punctuation">;</span>
            hash<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> hs<span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token function">hll</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">hs</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

unordered_map<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;&gt;</span> fifth<span class="token punctuation">;</span> <span class="token comment">// empty</span>
unordered_map<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;&gt;</span> <span class="token function">sixth</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;student 1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;Math&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;English&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;student 2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;French&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;English&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// init list</span>
<span class="token comment">// copy \uC0DD\uC131\uC790 \uAC00\uB2A5</span>
<span class="token comment">// range \uC0DD\uC131\uC790 \uAC00\uB2A5</span>
</code></pre></div></details><details class="custom-container details"><summary>\uBC29\uBC95 2. \uD574\uC2DC \uD568\uC218\uB97C \uAC00\uC9C4 \uC790\uB8CC\uD615 \uC815\uC758</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    string name<span class="token punctuation">;</span>

    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id <span class="token operator">==</span> rhs<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span> name <span class="token operator">==</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">HashStudent</span> <span class="token punctuation">{</span>
    size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hash<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span> hll<span class="token punctuation">;</span>
        hash<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> hs<span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">hll</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">hs</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

unordered_map<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">,</span> HashStudent<span class="token operator">&gt;</span> seventh<span class="token punctuation">;</span>
</code></pre></div></details><h3 id="\u110B\u1167\u11AB\u1109\u1161\u11AB\u110C\u1161" tabindex="-1"><a class="header-anchor" href="#\u110B\u1167\u11AB\u1109\u1161\u11AB\u110C\u1161" aria-hidden="true">#</a> []\uC5F0\uC0B0\uC790</h3><details class="custom-container details"><summary>\uC694\uC18C \uC0BD\uC785/\uC218\uC815</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>fifth<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;student 3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Math&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;English&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;French&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div></details><details class="custom-container details"><summary>\uC694\uC18C \uC811\uADFC</summary><p>\uC694\uC18C\uAC00 \uC874\uC7AC\uD558\uC9C0 \uC54A\uB294 \uACBD\uC6B0 \uAE30\uBCF8\uAC12(default value)\uC774 \uBC18\uD658\uB429\uB2C8\uB2E4.</p><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>second<span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// red</span>
second<span class="token punctuation">[</span><span class="token string">&quot;grape&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// &quot;&quot;, \uBE48 \uBB38\uC790\uC5F4(\uAE30\uBCF8\uAC12)</span>
fifth<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;student 3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// {&quot;Math&quot;, &quot;English&quot;, &quot;French&quot;};</span>
fifth<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;student 4&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// {}, \uBE48 vector&lt;string&gt; \uCEE8\uD14C\uC774\uB108(\uAE30\uBCF8\uAC12)</span>
</code></pre></div><p>\uB530\uB77C\uC11C \uD6C4\uC220\uD560 find \uBA54\uC11C\uB4DC\uB97C \uC774\uC6A9\uD574 \uC694\uC18C\uAC00 \uC874\uC7AC\uD558\uB294\uC9C0 \uD655\uC778\uD558\uACE0 \uC811\uADFC\uD558\uB294 \uAC83\uC774 \uC88B\uC2B5\uB2C8\uB2E4.</p></details><h3 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> insert</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> p <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">&quot;grape&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;violet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fourth<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// copy</span>
fourth<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">make_pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;grape&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;violet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// move</span>
fourth<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>second<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> second<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// range</span>
</code></pre></div><h3 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>unordered_map<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;&gt;</span><span class="token double-colon punctuation">::</span>iterator fifthIt <span class="token operator">=</span> fifth<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;student 2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fifthIt == fifth.end(), \uC874\uC7AC\uD558\uC9C0 \uC54A\uC74C</span>
unordered_map<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;&gt;</span><span class="token double-colon punctuation">::</span>iterator sixthIt <span class="token operator">=</span> sixth<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;student 2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="erase" tabindex="-1"><a class="header-anchor" href="#erase" aria-hidden="true">#</a> erase</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>sixth<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>sixthIt<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="\u1109\u116E\u11AB\u1112\u116C-\u110B\u116D\u1109\u1169-\u110C\u1165\u11B8\u1100\u1173\u11AB" tabindex="-1"><a class="header-anchor" href="#\u1109\u116E\u11AB\u1112\u116C-\u110B\u116D\u1109\u1169-\u110C\u1165\u11B8\u1100\u1173\u11AB" aria-hidden="true">#</a> \uC21C\uD68C &amp; \uC694\uC18C \uC811\uADFC</h3><details class="custom-container details"><summary>iterator</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>unordered_map<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>sixth<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>sixth<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Student student <span class="token operator">=</span> it<span class="token operator">-&gt;</span>first<span class="token punctuation">;</span>        <span class="token comment">// key</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> vStr <span class="token operator">=</span> it<span class="token operator">-&gt;</span>second<span class="token punctuation">;</span>   <span class="token comment">// value</span>
<span class="token punctuation">}</span>
</code></pre></div></details><details class="custom-container details"><summary>enhanced-for - pair</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;&gt;</span> p<span class="token operator">:</span> sixth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Student student <span class="token operator">=</span> p<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> vStr <span class="token operator">=</span> p<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></details><h2 id="a-\u110E\u1161\u11B7\u110C\u1169" tabindex="-1"><a class="header-anchor" href="#a-\u110E\u1161\u11B7\u110C\u1169" aria-hidden="true">#</a> A. \uCC38\uC870</h2>`,19),m={style:{"text-align":"left"}},B={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},g={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},h={href:"https://m.cplusplus.com/reference/unordered_map/unordered_map/",target:"_blank",rel:"noopener noreferrer"},A=s("em",null,"Tistory",-1),D={href:"https://blockdmask.tistory.com/87",target:"_blank",rel:"noopener noreferrer"},f=o({__name:"10-stl-unordered-map.html",setup(y){return(_,q)=>{const t=r("ExternalLinkIcon");return e(),c("div",null,[i,s("p",null,[n("\uAC01 \uBA64\uBC84\uD568\uC218\uC758 \uC608\uC81C \uCF54\uB4DC\uB97C \uC791\uC131\uD558\uAE30\uC5D4 \uC591\uC774 \uB9E4\uC6B0 \uB9CE\uAE30 \uB54C\uBB38\uC5D0 "),s("a",C,[n("cplusplus.com"),a(t)]),n("\uC5D0\uC11C \uAC01 \uBA64\uBC84 \uD568\uC218 \uB9C1\uD06C\uB97C \uD074\uB9AD\uD558\uC5EC \uC608\uC81C\uB97C \uD655\uC778\uD558\uC790.")]),d,s("div",m,[s("p",null,[s("a",B,[n("cplusplus.com"),a(t)]),n(', "std::unordered_map", '),s("em",null,[s("a",g,[n("cplusplus.com"),a(t)])]),n(", [Online]. Available: "),s("a",h,[n("https://m.cplusplus.com/reference/unordered_map/unordered_map/"),a(t)]),n(" [Accessed May 26, 2022].")]),s("p",null,[n('BlockDMask, "[C++] map container \uC815\uB9AC \uBC0F \uC0AC\uC6A9\uBC95", '),A,n(", Jul. 28, 2017. [Online]. Available: "),s("a",D,[n("https://blockdmask.tistory.com/87"),a(t)]),n(" [Accessed May 27, 2022].")])]),a(l(u))])}}}),x=k(f,[["__file","10-stl-unordered-map.html.vue"]]);export{x as default};
