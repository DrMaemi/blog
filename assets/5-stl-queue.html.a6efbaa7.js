import{D as p}from"./DetailsOpen.d5ab58f9.js";import{f as o,o as e,c,a as s,b as n,d as a,u as l,e as u,r}from"./app.36f4632c.js";import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";const k=u(`<h2 id="\u110F\u1172-queue-\u110F\u1165\u11AB\u1110\u1166\u110B\u1175\u1102\u1165" tabindex="-1"><a class="header-anchor" href="#\u110F\u1172-queue-\u110F\u1165\u11AB\u1110\u1166\u110B\u1175\u1102\u1165" aria-hidden="true">#</a> \uD050(queue) \uCEE8\uD14C\uC774\uB108</h2><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token operator">=</span> deque<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span> <span class="token keyword">class</span> <span class="token class-name">queue</span><span class="token punctuation">;</span>
</code></pre></div><div class="custom-container info"><p class="custom-container-title">Info</p><p>\uD050(queue)\uB294 FIFO(First-In-First-Out) \uC5F0\uC0B0\uC744 \uC704\uD574 \uC124\uACC4\uB41C \uCEE8\uD14C\uC774\uB108 \uC5B4\uB381\uD130(Container Adaptor)\uB2E4.</p><p>\uCEE8\uD14C\uC774\uB108 \uC5B4\uB311\uD130(container adapter)\uB780 \uAE30\uC874 \uCEE8\uD14C\uC774\uB108\uC758 \uC778\uD130\uD398\uC774\uC2A4\uB97C \uC81C\uD55C\uD558\uC5EC \uB9CC\uB4E0 \uAE30\uB2A5\uC774 \uC81C\uD55C\uB418\uAC70\uB098 \uBCC0\uD615\uB41C \uCEE8\uD14C\uC774\uB108\uB97C \uC758\uBBF8\uD569\uB2C8\uB2E4. \uC774\uB7EC\uD55C \uCEE8\uD14C\uC774\uB108 \uC5B4\uB311\uD130\uB294 \uAC01\uAC01\uC758 \uAE30\uCD08\uAC00 \uB418\uB294 \uD074\uB798\uC2A4\uC758 \uC778\uD130\uD398\uC774\uC2A4\uB97C \uC81C\uD55C\uD558\uC5EC, \uD2B9\uC815 \uD615\uD0DC\uC758 \uB3D9\uC791\uB9CC\uC744 \uC218\uD589\uD558\uB3C4\uB85D \uD569\uB2C8\uB2E4.</p></div><p>\uD050 \uCEE8\uD14C\uC774\uB108\uB97C \uC774\uC6A9\uD558\uB824\uBA74 \uB2E4\uC74C \uCF54\uB4DC\uB97C \uCD94\uAC00\uD574\uC57C \uD55C\uB2E4.</p><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>
</code></pre></div><h2 id="\u110F\u1172-\u1106\u1166\u11B7\u1107\u1165-\u1112\u1161\u11B7\u1109\u116E" tabindex="-1"><a class="header-anchor" href="#\u110F\u1172-\u1106\u1166\u11B7\u1107\u1165-\u1112\u1161\u11B7\u1109\u116E" aria-hidden="true">#</a> \uD050 \uBA64\uBC84 \uD568\uC218</h2>`,6),C={href:"https://m.cplusplus.com/reference/queue/queue/",target:"_blank",rel:"noopener noreferrer"},d=u(`<h3 id="\u1109\u1162\u11BC\u1109\u1165\u11BC\u110C\u1161-constructor" tabindex="-1"><a class="header-anchor" href="#\u1109\u1162\u11BC\u1109\u1165\u11BC\u110C\u1161-constructor" aria-hidden="true">#</a> \uC0DD\uC131\uC790(Constructor)</h3><ul><li><em>initialization constructor</em></li><li><em>move-initialization constructor</em></li><li><em>allocator constructor</em></li><li><em>initialization with allocator constructor</em></li><li><em>move-initialization with allocator constructor</em></li><li><em>copy with allocator constructor</em></li><li><em>move with allocator constructor</em></li></ul><h3 id="\u110B\u116D\u11BC\u1105\u1163\u11BC-capacity" tabindex="-1"><a class="header-anchor" href="#\u110B\u116D\u11BC\u1105\u1163\u11BC-capacity" aria-hidden="true">#</a> \uC6A9\uB7C9(Capacity)</h3><ul><li>empty</li><li>size</li></ul><h3 id="\u110B\u116D\u1109\u1169-\u110C\u1165\u11B8\u1100\u1173\u11AB-element-access" tabindex="-1"><a class="header-anchor" href="#\u110B\u116D\u1109\u1169-\u110C\u1165\u11B8\u1100\u1173\u11AB-element-access" aria-hidden="true">#</a> \uC694\uC18C \uC811\uADFC(Element access)</h3><ul><li>front</li><li>back</li></ul><h3 id="\u1109\u116E\u110C\u1165\u11BC\u110C\u1161-modifier" tabindex="-1"><a class="header-anchor" href="#\u1109\u116E\u110C\u1165\u11BC\u110C\u1161-modifier" aria-hidden="true">#</a> \uC218\uC815\uC790(Modifier)</h3><ul><li>push</li><li>pop</li><li>swap</li><li>emplace</li></ul><h2 id="\u110F\u1172-\u110B\u1168\u110C\u1166" tabindex="-1"><a class="header-anchor" href="#\u110F\u1172-\u110B\u1168\u110C\u1166" aria-hidden="true">#</a> \uD050 \uC608\uC81C</h2><h3 id="\u1109\u1165\u11AB\u110B\u1165\u11AB" tabindex="-1"><a class="header-anchor" href="#\u1109\u1165\u11AB\u110B\u1165\u11AB" aria-hidden="true">#</a> \uC120\uC5B8</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">myDeck</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">myList</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> first<span class="token punctuation">;</span> <span class="token comment">// empty constructor</span>
queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">second</span><span class="token punctuation">(</span>myDeck<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// copy with allocator constructor</span>
queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">third</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">fourth</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// copy constructor</span>
queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">fifth</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>queue \uCEE8\uD14C\uC774\uB108\uC758 \uAE30\uB2A5(FIFO \uC5F0\uC0B0)\uC744 \uC218\uD589\uD560 \uC218 \uC788\uB294 \uAE30\uBC18 \uCEE8\uD14C\uC774\uB108\uB294 <em>list</em>\uC640 <em>deque</em>\uC774 \uC788\uC73C\uBA70, \uC0DD\uC131\uC790\uB97C \uD1B5\uD574 \uC778\uC2A4\uD134\uC2A4\uD654(Instanciation)\uD560 \uB54C \uBA85\uC2DC\uD558\uC9C0 \uC54A\uC73C\uBA74 \uAE30\uBCF8 \uAC12\uC73C\uB85C <em>deque</em>\uC744 \uC0AC\uC6A9\uD55C\uB2E4.</p><h3 id="\u1109\u1165\u11AB\u110B\u1165\u11AB-with-\u1100\u116E\u110C\u1169\u110E\u1166" tabindex="-1"><a class="header-anchor" href="#\u1109\u1165\u11AB\u110B\u1165\u11AB-with-\u1100\u116E\u110C\u1169\u110E\u1166" aria-hidden="true">#</a> \uC120\uC5B8 with \uAD6C\uC870\uCCB4</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    string name<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

queue<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>queue<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="while-front-pop" tabindex="-1"><a class="header-anchor" href="#while-front-pop" aria-hidden="true">#</a> while &amp; front &amp; pop</h3><p>\uC694\uC18C \uC21C\uCC28 \uC811\uADFC \uBC0F \uC81C\uAC70</p><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="vector-\u2192-queue-\u1112\u1167\u11BC\u1107\u1167\u11AB\u1112\u116A\u11AB" tabindex="-1"><a class="header-anchor" href="#vector-\u2192-queue-\u1112\u1167\u11BC\u1107\u1167\u11AB\u1112\u116A\u11AB" aria-hidden="true">#</a> vector \u2192 queue \uD615\uBCC0\uD658</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
queue<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">deque</span><span class="token generic class-name"><span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="\u110B\u116E\u1109\u1165\u11AB\u1109\u116E\u11AB\u110B\u1171-\u110F\u1172-priority-queue-\u110F\u1165\u11AB\u1110\u1166\u110B\u1175\u1102\u1165" tabindex="-1"><a class="header-anchor" href="#\u110B\u116E\u1109\u1165\u11AB\u1109\u116E\u11AB\u110B\u1171-\u110F\u1172-priority-queue-\u110F\u1165\u11AB\u1110\u1166\u110B\u1175\u1102\u1165" aria-hidden="true">#</a> \uC6B0\uC120\uC21C\uC704 \uD050(Priority Queue) \uCEE8\uD14C\uC774\uB108</h2><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span>
    <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
    <span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token operator">=</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> less<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">&gt;</span>
<span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">priority_queue</span><span class="token punctuation">;</span>
</code></pre></div><p>\uD799(Heap) \uC790\uB8CC\uAD6C\uC870\uB97C \uC774\uC6A9\uD574\uC11C \uAD6C\uD604\uD55C \uC6B0\uC120\uC21C\uC704 \uD050\uB294 \uD050\uC640 \uB9C8\uCC2C\uAC00\uC9C0\uB85C \uCEE8\uD14C\uC774\uB108 \uC5B4\uB381\uD130\uC774\uB2E4.</p><h2 id="\u110B\u116E\u1109\u1165\u11AB\u1109\u116E\u11AB\u110B\u1171-\u110F\u1172-\u1106\u1166\u11B7\u1107\u1165-\u1112\u1161\u11B7\u1109\u116E" tabindex="-1"><a class="header-anchor" href="#\u110B\u116E\u1109\u1165\u11AB\u1109\u116E\u11AB\u110B\u1171-\u110F\u1172-\u1106\u1166\u11B7\u1107\u1165-\u1112\u1161\u11B7\u1109\u116E" aria-hidden="true">#</a> \uC6B0\uC120\uC21C\uC704 \uD050 \uBA64\uBC84 \uD568\uC218</h2>`,24),B={href:"https://m.cplusplus.com/reference/queue/priority_queue/",target:"_blank",rel:"noopener noreferrer"},h=u(`<h3 id="\u1109\u1162\u11BC\u1109\u1165\u11BC\u110C\u1161-constructor-1" tabindex="-1"><a class="header-anchor" href="#\u1109\u1162\u11BC\u1109\u1165\u11BC\u110C\u1161-constructor-1" aria-hidden="true">#</a> \uC0DD\uC131\uC790(Constructor)</h3><ul><li><em>initialization constructor</em></li><li><em>range initialization constructor</em></li><li><em>move-initialization constructor</em></li><li><em>move-range initialization constructor</em></li><li><em>allocator constructor</em></li></ul><h3 id="\u110B\u116D\u11BC\u1105\u1163\u11BC-capacity-1" tabindex="-1"><a class="header-anchor" href="#\u110B\u116D\u11BC\u1105\u1163\u11BC-capacity-1" aria-hidden="true">#</a> \uC6A9\uB7C9(Capacity)</h3><ul><li>empty</li><li>size</li></ul><h3 id="\u110B\u116D\u1109\u1169-\u110C\u1165\u11B8\u1100\u1173\u11AB-element-access-1" tabindex="-1"><a class="header-anchor" href="#\u110B\u116D\u1109\u1169-\u110C\u1165\u11B8\u1100\u1173\u11AB-element-access-1" aria-hidden="true">#</a> \uC694\uC18C \uC811\uADFC(Element access)</h3><ul><li>top</li></ul><h3 id="\u1109\u116E\u110C\u1165\u11BC\u110C\u1161-modifier-1" tabindex="-1"><a class="header-anchor" href="#\u1109\u116E\u110C\u1165\u11BC\u110C\u1161-modifier-1" aria-hidden="true">#</a> \uC218\uC815\uC790(Modifier)</h3><ul><li>push</li><li>pop</li><li>swap</li><li>emplace</li></ul><h2 id="\u110B\u116E\u1109\u1165\u11AB\u1109\u116E\u11AB\u110B\u1171-\u110F\u1172-\u110B\u1168\u110C\u1166" tabindex="-1"><a class="header-anchor" href="#\u110B\u116E\u1109\u1165\u11AB\u1109\u116E\u11AB\u110B\u1171-\u110F\u1172-\u110B\u1168\u110C\u1166" aria-hidden="true">#</a> \uC6B0\uC120\uC21C\uC704 \uD050 \uC608\uC81C</h2><h3 id="\u1109\u1165\u11AB\u110B\u1165\u11AB-1" tabindex="-1"><a class="header-anchor" href="#\u1109\u1165\u11AB\u110B\u1165\u11AB-1" aria-hidden="true">#</a> \uC120\uC5B8</h3><details class="custom-container details"><summary>Max Heap &amp; empty constructor</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> first<span class="token punctuation">;</span> <span class="token comment">// empty constructor</span>
</code></pre></div></details><details class="custom-container details"><summary>Min Heap &amp; range constructor</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">second</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// range constructor</span>
</code></pre></div></details><h3 id="\u1109\u1165\u11AB\u110B\u1165\u11AB-with-\u1100\u116E\u110C\u1169\u110E\u1166-1" tabindex="-1"><a class="header-anchor" href="#\u1109\u1165\u11AB\u110B\u1165\u11AB-with-\u1100\u116E\u110C\u1169\u110E\u1166-1" aria-hidden="true">#</a> \uC120\uC5B8 with \uAD6C\uC870\uCCB4</h3><details class="custom-container details"><summary>Max Heap with <code>&lt;</code>\uC5F0\uC0B0\uC790 \uC624\uBC84\uB85C\uB529</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    string name<span class="token punctuation">;</span>

    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> id <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
        <span class="token keyword">return</span> name <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

priority_queue<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> pq<span class="token punctuation">;</span>
</code></pre></div></details><details class="custom-container details"><summary>Min Heap with <code>&gt;</code>\uC5F0\uC0B0\uC790 \uC624\uBC84\uB85C\uB529</summary><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    string name<span class="token punctuation">;</span>

    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> id <span class="token operator">&gt;</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
        <span class="token keyword">return</span> name <span class="token operator">&gt;</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

priority_queue<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>Student<span class="token operator">&gt;&gt;</span> pq<span class="token punctuation">;</span>
</code></pre></div></details><details class="custom-container details"><summary>Compare \uD074\uB798\uC2A4 \uC0AC\uC6A9</summary><p>Min Heap</p><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    string name<span class="token punctuation">;</span>

    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> id <span class="token operator">&gt;</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
        <span class="token keyword">return</span> name <span class="token operator">&gt;</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">StudentCompare</span> <span class="token punctuation">{</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lhs <span class="token operator">&gt;</span> rhs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

priority_queue<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span><span class="token punctuation">,</span> StudentCompare<span class="token operator">&gt;</span> pq<span class="token punctuation">;</span>
</code></pre></div><p>Max-Min Heap (toggle)</p><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    string name<span class="token punctuation">;</span>

    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> id <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">name</span> <span class="token generic class-name"><span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> id <span class="token operator">&gt;</span> rhs<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
        <span class="token keyword">return</span> name <span class="token operator">&gt;</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">StudentCompare</span> <span class="token punctuation">{</span>
    <span class="token keyword">bool</span> reverse<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">StudentCompare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">bool</span> reverse<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">reverse</span><span class="token punctuation">(</span>reverse<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Student<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reverse<span class="token punctuation">)</span> <span class="token keyword">return</span> lhs <span class="token operator">&gt;</span> rhs<span class="token punctuation">;</span>
        <span class="token keyword">return</span> lhs <span class="token operator">&lt;</span> rhs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

priority_queue<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span><span class="token punctuation">,</span> StudentCompare<span class="token operator">&gt;</span> <span class="token function">pq1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
priority_queue<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span><span class="token punctuation">,</span> StudentCompare<span class="token operator">&gt;</span> <span class="token function">pq2</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></details><p>\uBE44\uAD50 \uAD6C\uC870\uCCB4\uC5D0\uC11C \uC5F0\uC0B0\uC790 <code>()</code> \uC815\uC758, \uD15C\uD50C\uB9BF\uC5D0 \uC0AC\uC6A9\uB41C \uAD6C\uC870\uCCB4\uC5D0\uC11C \uC5F0\uC0B0\uC790 <code>&lt;</code> \uC624\uBC84\uB85C\uB529\uC744 \uD1B5\uD574 \uCEE8\uD14C\uC774\uB108 \uB0B4\uBD80 \uC815\uB82C \uAE30\uC900\uC744 \uBA85\uC2DC\uD560 \uC218 \uC788\uB2E4.</p><p>\uC704 \uBC29\uC2DD\uC740 \uB2E4\uB978 STL \uCEE8\uD14C\uC774\uB108\uC758 \uD15C\uD50C\uB9BF \uC778\uC790\uC5D0 \uC0AC\uC6A9\uB418\uB294 \uBE44\uAD50 \uAC1D\uCCB4\uC5D0 \uB611\uAC19\uC774 \uC0AC\uC6A9\uB420 \uC218 \uC788\uB2E4. \uC608\uB97C \uB4E4\uBA74 \uC9D1\uD569 <code>set&lt;T, Compare, Alloc&gt;</code>\uC758 <code>Compare</code>\uC5D0 \uC0AC\uC6A9\uB420 \uC218 \uC788\uB2E4.</p><h3 id="while-top-pop" tabindex="-1"><a class="header-anchor" href="#while-top-pop" aria-hidden="true">#</a> while &amp; top &amp; pop</h3><p>\uC694\uC18C \uC21C\uCC28 \uC811\uADFC \uBC0F \uC81C\uAC70</p><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Student t <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="a-\u110E\u1161\u11B7\u110C\u1169" tabindex="-1"><a class="header-anchor" href="#a-\u110E\u1161\u11B7\u110C\u1169" aria-hidden="true">#</a> A. \uCC38\uC870</h2>`,22),m={style:{"text-align":"left"}},g={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},D={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},y={href:"https://m.cplusplus.com/reference/queue/queue/",target:"_blank",rel:"noopener noreferrer"},A={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},w={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},f={href:"https://m.cplusplus.com/reference/queue/priority_queue/",target:"_blank",rel:"noopener noreferrer"},E=o({__name:"5-stl-queue.html",setup(q){return(b,v)=>{const t=r("ExternalLinkIcon");return e(),c("div",null,[k,s("p",null,[n("\uAC01 \uBA64\uBC84\uD568\uC218\uC758 \uC608\uC81C \uCF54\uB4DC\uB97C \uC791\uC131\uD558\uAE30\uC5D4 \uC591\uC774 \uB9E4\uC6B0 \uB9CE\uAE30 \uB54C\uBB38\uC5D0 "),s("a",C,[n("cplusplus.com"),a(t)]),n("\uC5D0\uC11C \uAC01 \uBA64\uBC84 \uD568\uC218 \uB9C1\uD06C\uB97C \uD074\uB9AD\uD558\uC5EC \uC608\uC81C\uB97C \uD655\uC778\uD558\uC790.")]),d,s("p",null,[n("\uAC01 \uBA64\uBC84\uD568\uC218\uC758 \uC608\uC81C \uCF54\uB4DC\uB97C \uC791\uC131\uD558\uAE30\uC5D4 \uC591\uC774 \uB9E4\uC6B0 \uB9CE\uAE30 \uB54C\uBB38\uC5D0 "),s("a",B,[n("cplusplus.com"),a(t)]),n("\uC5D0\uC11C \uAC01 \uBA64\uBC84 \uD568\uC218 \uB9C1\uD06C\uB97C \uD074\uB9AD\uD558\uC5EC \uC608\uC81C\uB97C \uD655\uC778\uD558\uC790.")]),h,s("div",m,[s("p",null,[s("a",g,[n("cplusplus.com"),a(t)]),n(', "std::queue", '),s("em",null,[s("a",D,[n("cplusplus.com"),a(t)])]),n(", [Online]. Available: "),s("a",y,[n("https://m.cplusplus.com/reference/queue/queue/"),a(t)]),n(" [Accessed May 26, 2022].")]),s("p",null,[s("a",A,[n("cplusplus.com"),a(t)]),n(', "std::queue", '),s("em",null,[s("a",w,[n("cplusplus.com"),a(t)])]),n(", [Online]. Available: "),s("a",f,[n("https://m.cplusplus.com/reference/queue/priority_queue/"),a(t)]),n(" [Accessed May 26, 2022].")])]),a(l(p))])}}}),S=i(E,[["__file","5-stl-queue.html.vue"]]);export{S as default};
