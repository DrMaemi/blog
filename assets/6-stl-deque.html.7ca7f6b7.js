import{D as e}from"./DetailsOpen.d5ab58f9.js";import{f as p,o,c,a as s,b as n,d as a,u as l,e as t,r as i}from"./app.69b3cd2f.js";import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";const C=t(`<div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">=</span> allocator<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span> <span class="token keyword">class</span> <span class="token class-name">deque</span><span class="token punctuation">;</span>
</code></pre></div><p>\uB371(deque)\uC740 Double-ended queue\uC758 \uC57D\uC790\uB85C \uC591\uCABD \uB05D\uC5D0\uC11C \uD655\uC7A5 \uAC00\uB2A5\uD55C \uC21C\uCC28 \uCEE8\uD14C\uC774\uB108(Sequence Container)\uC774\uB2E4.</p><p>\uB371\uC740 \uB2E4\uC591\uD55C \uBC29\uBC95\uC73C\uB85C \uAD6C\uD604\uD560 \uC218 \uC788\uC9C0\uB9CC \uACB0\uB860\uC801\uC73C\uB85C \uC784\uC758\uC758 \uC694\uC18C\uC5D0 \uC9C1\uC811 \uC811\uADFC\uD560 \uC218 \uC788\uB294 random access iterators\uC640, \uD544\uC694\uC5D0 \uB530\uB978 \uC790\uB8CC\uAD6C\uC870 \uD655\uC7A5\uACFC \uCD95\uC18C\uB97C \uC704\uD55C \uC800\uC7A5 \uACF5\uAC04 \uAD00\uB9AC \uAE30\uB2A5\uC744 \uC81C\uACF5\uD55C\uB2E4.</p><p>\uB371\uC740 \uBCA1\uD130(vector)\uC640 \uC720\uC0AC\uD55C \uAE30\uB2A5\uC744 \uAC00\uC9C0\uC9C0\uB9CC \uC11C\uB85C \uB2E4\uB978 \uBC29\uC2DD\uC73C\uB85C \uB3D9\uC791\uD55C\uB2E4. \uBCA1\uD130\uB294 \uC5F0\uC18D\uC801\uC778 \uBA54\uBAA8\uB9AC \uACF5\uAC04\uC5D0 \uB370\uC774\uD130\uB97C \uC800\uC7A5\uD558\uC9C0\uB9CC \uB371\uC740 \uC0B0\uC7AC\uD55C \uBA54\uBAA8\uB9AC \uACF5\uAC04\uC5D0 \uB370\uC774\uD130\uB97C \uC800\uC7A5\uD558\uBA70, \uC784\uC758\uC758 \uC694\uC18C\uC5D0 \uC9C1\uC811 \uC811\uADFC\uC744 \uC704\uD574 \uD544\uC694\uD55C \uB17C\uB9AC \uC815\uBCF4\uB97C \uB0B4\uBD80\uC5D0 \uC800\uC7A5\uD574\uB454\uB2E4. \uC774 \uB54C\uBB38\uC5D0 \uC5F0\uC18D \uACF5\uAC04\uC744 \uC0AC\uC6A9\uD558\uC9C0 \uC54A\uB354\uB77C\uB3C4 \uC784\uC758 \uC811\uADFC(random access)\uC5D0 *O(1)*\uC758 \uC2DC\uAC04\uBCF5\uC7A1\uB3C4\uB97C \uAC00\uC9C4\uB2E4. \uB530\uB77C\uC11C \uB371\uC740 \uBCA1\uD130\uBCF4\uB2E4 \uB0B4\uBD80\uC801\uC73C\uB85C \uB354 \uBCF5\uC7A1\uD558\uAC8C \uAD6C\uD604\uB418\uC5B4 \uC788\uB2E4.</p><p>\uADF8\uB7EC\uB098 \uB371\uC740 \uAE30\uBCF8\uC801\uC73C\uB85C \uCEE8\uD14C\uC774\uB108\uC758 \uCCAB \uC694\uC18C\uC640 \uB05D \uC694\uC18C\uC5D0 \uB300\uD55C \uC811\uADFC/\uC218\uC815 \uC5F0\uC0B0\uC5D0 \uD2B9\uD654\uB418\uC5B4 \uC788\uC73C\uBA70, \uADF8 \uC678 \uC5F0\uC0B0\uC758 \uACBD\uC6B0 \uBCA1\uD130\uB098 \uB9AC\uC2A4\uD2B8(list)\uC5D0 \uBE44\uD574 \uC131\uB2A5\uC774 \uC88B\uC9C0 \uC54A\uACE0 \uBC18\uBCF5\uC790 \uBC0F \uCC38\uC870\uC758 \uC77C\uAD00\uC131\uC774 \uB5A8\uC5B4\uC9C4\uB2E4.</p><p>\uB371 \uCEE8\uD14C\uC774\uB108\uB97C \uC774\uC6A9\uD558\uB824\uBA74 \uB2E4\uC74C \uCF54\uB4DC\uB97C \uCD94\uAC00\uD574\uC57C \uD55C\uB2E4.</p><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque&gt;</span></span>
</code></pre></div><h2 id="\u1106\u1166\u11B7\u1107\u1165-\u1112\u1161\u11B7\u1109\u116E" tabindex="-1"><a class="header-anchor" href="#\u1106\u1166\u11B7\u1107\u1165-\u1112\u1161\u11B7\u1109\u116E" aria-hidden="true">#</a> \uBA64\uBC84 \uD568\uC218</h2>`,8),k={href:"https://m.cplusplus.com/reference/deque/deque/",target:"_blank",rel:"noopener noreferrer"},d=t(`<h3 id="\u1109\u1162\u11BC\u1109\u1165\u11BC\u110C\u1161-constructor" tabindex="-1"><a class="header-anchor" href="#\u1109\u1162\u11BC\u1109\u1165\u11BC\u110C\u1161-constructor" aria-hidden="true">#</a> \uC0DD\uC131\uC790(Constructor)</h3><ul><li><em>empty container constructor</em></li><li><em>fill constructor</em></li><li><em>range constructor</em></li><li><em>copy constructor (and copying with allocator)</em></li><li><em>move constructor (and moving with allocator)</em></li><li><em>initializer list constructor</em></li></ul><h3 id="\u1107\u1161\u11AB\u1107\u1169\u11A8\u110C\u1161-iterator" tabindex="-1"><a class="header-anchor" href="#\u1107\u1161\u11AB\u1107\u1169\u11A8\u110C\u1161-iterator" aria-hidden="true">#</a> \uBC18\uBCF5\uC790(Iterator)</h3><ul><li>begin</li><li>end</li><li>rbegin</li><li>rend</li><li>cbegin</li></ul><h3 id="\u110B\u116D\u11BC\u1105\u1163\u11BC-capacity" tabindex="-1"><a class="header-anchor" href="#\u110B\u116D\u11BC\u1105\u1163\u11BC-capacity" aria-hidden="true">#</a> \uC6A9\uB7C9(Capacity)</h3><ul><li>size</li><li>max_size</li><li>resize</li><li>empty</li><li>shrink_to_fit</li></ul><h3 id="\u110B\u116D\u1109\u1169-\u110C\u1165\u11B8\u1100\u1173\u11AB-element-access" tabindex="-1"><a class="header-anchor" href="#\u110B\u116D\u1109\u1169-\u110C\u1165\u11B8\u1100\u1173\u11AB-element-access" aria-hidden="true">#</a> \uC694\uC18C \uC811\uADFC(Element access)</h3><ul><li>operator[]</li><li>at</li><li>front</li><li>back</li></ul><h3 id="\u1109\u116E\u110C\u1165\u11BC\u110C\u1161-modifier" tabindex="-1"><a class="header-anchor" href="#\u1109\u116E\u110C\u1165\u11BC\u110C\u1161-modifier" aria-hidden="true">#</a> \uC218\uC815\uC790(Modifier)</h3><ul><li>assign</li><li>push_back</li><li>push_front</li><li>pop_back</li><li>pop_front</li><li>insert</li><li>erase</li><li>swap</li><li>clear</li><li>emplace</li><li>emplace_front</li><li>emplace_back</li></ul><h3 id="\u1112\u1161\u11AF\u1103\u1161\u11BC\u110C\u1161" tabindex="-1"><a class="header-anchor" href="#\u1112\u1161\u11AF\u1103\u1161\u11BC\u110C\u1161" aria-hidden="true">#</a> \uD560\uB2F9\uC790</h3><ul><li>get_allocator</li></ul><h2 id="\u110B\u1168\u110C\u1166" tabindex="-1"><a class="header-anchor" href="#\u110B\u1168\u110C\u1166" aria-hidden="true">#</a> \uC608\uC81C</h2><h3 id="\u1109\u1162\u11BC\u1109\u1165\u11BC\u110C\u1161\u110B\u116A-\u110B\u116D\u1109\u1169-\u1109\u1161\u11B8\u110B\u1175\u11B8-\u1109\u1161\u11A8\u110C\u1166" tabindex="-1"><a class="header-anchor" href="#\u1109\u1162\u11BC\u1109\u1165\u11BC\u110C\u1161\u110B\u116A-\u110B\u116D\u1109\u1169-\u1109\u1161\u11B8\u110B\u1175\u11B8-\u1109\u1161\u11A8\u110C\u1166" aria-hidden="true">#</a> \uC0DD\uC131\uC790\uC640 \uC694\uC18C \uC0BD\uC785/\uC0AD\uC81C</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> first<span class="token punctuation">;</span> <span class="token comment">// empty constructor</span>
    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fill constructor - int \uC790\uB8CC\uD615 \uAC12 100\uC774 4\uAC1C</span>
    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">third</span><span class="token punctuation">(</span>second<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> second<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// range constructor</span>
    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">fourth</span><span class="token punctuation">(</span>third<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// copy constructor</span>

    <span class="token keyword">int</span> myArr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">fifth</span><span class="token punctuation">(</span>myArr<span class="token punctuation">,</span> myArr<span class="token operator">+</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>myArr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \uB2E4\uB978 \uBC30\uC5F4\uC758 \uD3EC\uC778\uD130\uB85C\uB3C4 \uC0DD\uC131 \uAC00\uB2A5</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The contents of fifth are:&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>fifth<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>fifth<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

    fifth<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;after .push_back(5), fifth:&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>fifth<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> fifth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

    fifth<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;after .pop_back(), fifth:&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>fifth<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>fifth<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

    fifth<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;after fifth.swap(second),\\nfifth:&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>fifth<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>fifth<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;second:&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>second<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>second<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>\uC2E4\uD589 \uACB0\uACFC</summary><div class="language-text ext-text"><pre class="language-text"><code>The contents of fifth are: 16 2 77 29
after .push_back(5), fifth: 16 2 77 29 5
after .pop_back(), fifth: 16 2 77 29
after fifth.swap(second),
fifth: 100 100 100 100
second: 16 2 77 29
</code></pre></div></details><h2 id="a-\u110E\u1161\u11B7\u110C\u1169" tabindex="-1"><a class="header-anchor" href="#a-\u110E\u1161\u11B7\u110C\u1169" aria-hidden="true">#</a> A. \uCC38\uC870</h2>`,17),B={style:{"text-align":"left"}},m={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},h={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},f={href:"https://m.cplusplus.com/reference/deque/deque/",target:"_blank",rel:"noopener noreferrer"},D=p({__name:"6-stl-deque.html",setup(A){return(v,b)=>{const u=i("ExternalLinkIcon");return o(),c("div",null,[C,s("p",null,[n("\uAC01 \uBA64\uBC84\uD568\uC218\uC758 \uC608\uC81C \uCF54\uB4DC\uB97C \uC791\uC131\uD558\uAE30\uC5D4 \uC591\uC774 \uB9E4\uC6B0 \uB9CE\uAE30 \uB54C\uBB38\uC5D0 "),s("a",k,[n("cplusplus.com"),a(u)]),n("\uC5D0\uC11C \uAC01 \uBA64\uBC84 \uD568\uC218 \uB9C1\uD06C\uB97C \uD074\uB9AD\uD558\uC5EC \uC608\uC81C\uB97C \uD655\uC778\uD558\uC790.")]),d,s("div",B,[s("p",null,[s("a",m,[n("cplusplus.com"),a(u)]),n(', "std::deque", '),s("em",null,[s("a",h,[n("cplusplus.com"),a(u)])]),n(", [Online]. Available: "),s("a",f,[n("https://m.cplusplus.com/reference/deque/deque/"),a(u)]),n(" [Accessed May 26, 2022].")])]),a(l(e))])}}}),E=r(D,[["__file","6-stl-deque.html.vue"]]);export{E as default};
