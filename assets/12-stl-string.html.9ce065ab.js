import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as e,a as n,b as s,d as t,e as c,r as u}from"./app.b87983f1.js";const r={},l=c(`<h3 id="string-\u2192-char" tabindex="-1"><a class="header-anchor" href="#string-\u2192-char" aria-hidden="true">#</a> string \u2192 char*</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>string s <span class="token operator">=</span> <span class="token string">&quot;It&#39;s string.&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="char-\u2192-string" tabindex="-1"><a class="header-anchor" href="#char-\u2192-string" aria-hidden="true">#</a> char \u2192 string</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
string <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="char-\u2192-string-1" tabindex="-1"><a class="header-anchor" href="#char-\u2192-string-1" aria-hidden="true">#</a> char[] \u2192 string</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;It&#39;s string.&quot;</span><span class="token punctuation">;</span>
string <span class="token function">s</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="string-\u2192-string" tabindex="-1"><a class="header-anchor" href="#string-\u2192-string" aria-hidden="true">#</a> string \u2192 string</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>string s1 <span class="token operator">=</span> <span class="token string">&quot;It&#39;s string.&quot;</span><span class="token punctuation">;</span>
string <span class="token function">s2</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="\u1100\u1169\u11BC\u1107\u1162\u11A8-split-\u1112\u1161\u11B7\u1109\u116E" tabindex="-1"><a class="header-anchor" href="#\u1100\u1169\u11BC\u1107\u1162\u11A8-split-\u1112\u1161\u11B7\u1109\u116E" aria-hidden="true">#</a> \uACF5\uBC31 <code>split()</code> \uD568\uC218</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">split</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> ret<span class="token punctuation">;</span>
    string buffer <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            buffer <span class="token operator">+=</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u1103\u1161\u11AB\u110B\u1165-\u110E\u1161\u11BD\u1100\u1175-find-string-npos" tabindex="-1"><a class="header-anchor" href="#\u1103\u1161\u11AB\u110B\u1165-\u110E\u1161\u11BD\u1100\u1175-find-string-npos" aria-hidden="true">#</a> \uB2E8\uC5B4 \uCC3E\uAE30 find, string::npos</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>string str <span class="token operator">=</span> <span class="token string">&quot; java c c++ +cc+ python &quot;</span><span class="token punctuation">;</span>
size_t fidx <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;c+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>fidx <span class="token operator">!=</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;in \\&quot;&quot;</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">&quot;\\&quot;, \\&quot;c+\\&quot; is founded at index &quot;</span> <span class="token operator">&lt;&lt;</span> fidx<span class="token punctuation">;</span>
<span class="token comment">// in &quot; java c c++ +cc+ python &quot;, &quot;c+&quot; is founded at index 8</span>
</code></pre></div><h3 id="\u1107\u116E\u1107\u116E\u11AB\u1106\u116E\u11AB\u110C\u1161\u110B\u1167\u11AF-substr" tabindex="-1"><a class="header-anchor" href="#\u1107\u116E\u1107\u116E\u11AB\u1106\u116E\u11AB\u110C\u1161\u110B\u1167\u11AF-substr" aria-hidden="true">#</a> \uBD80\uBD84\uBB38\uC790\uC5F4 substr</h3><div class="language-cpp ext-cpp"><pre class="language-cpp"><code>string <span class="token function">str</span><span class="token punctuation">(</span><span class="token string">&quot;There are two needles in this hackstay with needles.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// needles</span>
</code></pre></div><h2 id="a-\u110E\u1161\u11B7\u110C\u1169" tabindex="-1"><a class="header-anchor" href="#a-\u110E\u1161\u11B7\u110C\u1169" aria-hidden="true">#</a> A. \uCC38\uC870</h2>`,15),i={style:{"text-align":"left"}},k={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},d={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},h={href:"https://m.cplusplus.com/reference/string/string/",target:"_blank",rel:"noopener noreferrer"};function g(f,_){const a=u("ExternalLinkIcon");return o(),e("div",null,[l,n("div",i,[n("p",null,[n("a",k,[s("cplusplus.com"),t(a)]),s(', "<algorithm>", '),n("em",null,[n("a",d,[s("cplusplus.com"),t(a)])]),s(", [Online]. Available: "),n("a",h,[s("https://m.cplusplus.com/reference/string/string/"),t(a)]),s(" [Accessed May 27, 2022].")])])])}const x=p(r,[["render",g],["__file","12-stl-string.html.vue"]]);export{x as default};
